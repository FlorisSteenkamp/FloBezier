
import { getX } from '../../to-power-basis/get-x';
import { getY } from '../../to-power-basis/get-y';
import { 
    twoProduct, qNegativeOf, qMultBy2, qMultBy4, qMultByNeg2, qMultByNeg4, 
    qMultDouble2, qMultQuad, qAbs, qDiffQuad, qAddQuad, qMultDouble1, qDivBy2
} from 'flo-numerical';


const abs = Math.abs;

const tp  = twoProduct;     // error -> 0
const qno = qNegativeOf;    // error -> 0
const qm2 = qMultBy2;       // error -> 0 
const qd2 = qDivBy2;        // error -> 0 
//const qmd2 = qMultDouble1;  // error -> 1.5*γ²
const qmd = qMultDouble2;   // error -> 3*γ²
const qmq = qMultQuad;      // error -> 5*γ² (theoretical), 7*γ² (worst found), we use 6*γ²
const qdq = qDiffQuad;      // error -> 3*γ²
const qaq = qAddQuad;       // error -> 3*γ²


// TODO - document better
/**
 * Returns an approximate (quad precision) implicit form of the given cubic 
 * bezier and a coefficientwise error bound.
 * * precondition: the input coefficients must be 47-bit-aligned
 * @param coeffsX 
 * @param coeffsY 
 */
function getImplicitForm3Quad(ps: number[][]) {
    let [a3, a2, a1, a0]: number[] = getX(ps);
    let [b3, b2, b1, b0]: number[] = getY(ps);

    // The implicit form is given by:
    // vₓₓₓx³ + vₓₓᵧx²y + vₓᵧᵧxy² + vᵧᵧᵧy³ + vₓₓx² +vₓᵧxy + vᵧᵧy² + vₓx + vᵧy + v = 0

    // var -> a variable
    // $var -> the double approx of var
    // _var -> the absolute value of $var
    // var_ -> the error in var (but should still be multiplied by 3*γ²)
    // recall: a*b, where both a and b have errors |a| and |b| we get for the
    // error of (a*b) -> a_|b| + |a|b_ + abs(a*b)
    // error of (a+b) -> a_ + b_ + abs(a+b)
    // the returned errors need to be multiplied by 3γ² to represent the true
    // error

    let a3b1 = tp(a3,b1);  // error free
    let a1b3 = tp(a1,b3);  // error free
    let a3b2 = tp(a3,b2);  // error free
    let a2b2 = tp(a2,b2);  // error free
    let a2b3 = tp(a2,b3);  // error free
    let a3a3 = tp(a3,a3);  // error free
    let b2b2 = tp(b2,b2);  // error free
    let b3b3 = tp(b3,b3);  // error free
    let a1a3 = tp(a1,a3);  // error free
    let a2a2 = tp(a2,a2);  // error free
    let b1b3 = tp(b1,b3);  // error free
    let b2b3 = tp(b2,b3);  // error free
    let a2a3 = tp(a2,a3);  // error free
    let a3b3 = tp(a3,b3);  // error free
    let a3b0 = tp(a3,b0);  // error free
    let a0b3 = tp(a0,b3);  // error free
    let a2b0 = tp(a2,b0);  // error free
    let a0b2 = tp(a0,b2);  // error free
    let a2b1 = tp(a2,b1);  // error free
    let a1b2 = tp(a1,b2);  // error free
    let a1b0 = tp(a1,b0);  // error free
    let a0b1 = tp(a0,b1);  // error free

    let $a3b1 = a3*b1;
    let $a1b3 = a1*b3;
    let $a3b2 = a3*b2;
    let $a2b2 = a2*b2;
    let $a2b3 = a2*b3;
    let $a3a3 = a3*a3;
    let $b2b2 = b2*b2;
    let $b3b3 = b3*b3;
    let $a1a3 = a1*a3;
    let $a2a2 = a2*a2;
    let $b1b3 = b1*b3;
    let $b2b3 = b2*b3;
    let $a2a3 = a2*a3;
    let $a3b3 = a3*b3;
    let $a3b0 = a3*b0;
    let $a0b3 = a0*b3;
    let $a2b0 = a2*b0;
    let $a0b2 = a0*b2;
    let $a2b1 = a2*b1;
    let $a1b2 = a1*b2;
    let $a1b0 = a1*b0;
    let $a0b1 = a0*b1;

    let q1 = qdq(a3b0,a0b3);  // 48-bit aligned => error free
    let q2 = qdq(a3b1,a1b3);  // 48-bit aligned => error free
    let q3 = qdq(a3b2,a2b3);  // 48-bit aligned => error free
    let q4 = qdq(a2b0,a0b2);  // 48-bit aligned => error free
    let q5 = qdq(a2b1,a1b2);  // 48-bit aligned => error free
    let q6 = qdq(a1b0,a0b1);  // 48-bit aligned => error free
    let t1 = qdq(b1b3,b2b2);  // 48-bit aligned => error free
    let t2 = qdq(a1a3,a2a2);  // 48-bit aligned => error free
    let p1 = qaq(a2b3,a3b2);  // 48-bit aligned => error free
    let p2 = qaq(a1b3,a3b1);  // 48-bit aligned => error free
    let tq2 = qm2(q2);        // error free

    let $q1 = $a3b0 - $a0b3;
    let $q2 = $a3b1 - $a1b3;
    let $q3 = $a3b2 - $a2b3;
    let $q4 = $a2b0 - $a0b2;
    let $q5 = $a2b1 - $a1b2;
    let $q6 = $a1b0 - $a0b1;
    let $t1 = $b1b3 - $b2b2;
    let $t2 = $a1a3 - $a2a2;
    let $p1 = $a2b3 + $a3b2;
    let $p2 = $a1b3 + $a3b1;
    let $tq2 = 2*$q2;

    let q1q1  = qmq(q1,q1);
    let q1q2  = qmq(q1,q2);
    let q1q3  = qmq(q1,q3);
    let q1q5  = qmq(q1,q5);
    let q2q2  = qmq(q2,q2);
    let tq2q4 = qmq(tq2,q4);
    let q3q4  = qmq(q3,q4);
    let q3q5  = qmq(q3,q5);
    let q3q6  = qmq(q3,q6);

    let $q1q1  = $q1*$q1;
    let $q1q2  = $q1*$q2;
    let $q1q3  = $q1*$q3;
    let $q1q5  = $q1*$q5;
    let $q2q2  = $q2*$q2;
    let $tq2q4 = $tq2*$q4;
    let $q3q4  = $q3*$q4;
    let $q3q5  = $q3*$q5;
    let $q3q6  = $q3*$q6;

    let q1q1_  = 2*abs($q1q1);
    let q1q2_  = 2*abs($q1q2);
    let q1q3_  = 2*abs($q1q3);
    let q1q5_  = 2*abs($q1q5);
    let q2q2_  = 2*abs($q2q2);
    let tq2q4_ = 2*abs($tq2q4);
    let q3q4_  = 2*abs($q3q4);
    let q3q5_  = 2*abs($q3q5);
    let q3q6_  = 2*abs($q3q4);


    let $vₓₓₓ = -b3*$b3b3;
    let vₓₓₓ = qmd(-b3,b3b3);
    let vₓₓₓ_ = abs($vₓₓₓ);

    // recall: 
    // 49-bit aligned => 0 bits left in e.g. a3b2
    // 48-bit aligned => 2 bits left in e.g. a3b2
    // 47-bit aligned => 4 bits left in e.g. a3b2
    // 46-bit aligned => 6 bits left in e.g. a3b2

    // 47-bit aligned => 3*a0,...,b3 -> error free
    let $vₓₓᵧ = (3*a3)*$b3b3;
    let vₓₓᵧ  = qmd(3*a3,b3b3);
    let vₓₓᵧ_ = abs($vₓₓᵧ);

    // 47-bit aligned => 3*a0,...,b3 -> error free
    let $vₓᵧᵧ = (-3*b3)*$a3a3;
    let vₓᵧᵧ  = qmd(-3*b3,a3a3);
    let vₓᵧᵧ_ = abs($vₓᵧᵧ);

    let $vᵧᵧᵧ =  a3*$a3a3;
    let vᵧᵧᵧ =  qmd(a3,a3a3);
    let vᵧᵧᵧ_ = abs($vᵧᵧᵧ);

    // 47-bit aligned => qmd(3*q1 - q5,...) -> error free
    let $u1 = -3*$q1 - $q5;
    let u1 = qdq(qmd(-3,q1), q5); // 47-bit aligned => qmd(3*q1 - q5) -> error free
    //let _u1 = abs($u1);
    //let u1_ = 3*_q1 + _u1;

    // 48-bit aligned => t1, t2 -> error free
    //let _t1 = abs($t1);
    //let t1_ = _b1b3 + _b2b2 + _t1;
    //let _t2 = abs(t2);
    //let t2_ = _a1a3 + _a2a2 + abs(t2);
    
    let $w1 = $u1*$b3b3;
    let w1 = qmq(u1,b3b3);
    // recall: 2* below since error of qmq is double that of others
    let w1_ = 2*abs($w1); 
    let $w2 = $q3*$t1;
    let w2 = qmq(q3,t1);
    let w2_ = 2*abs($w2);
    let $w3 = $w1 + $w2;
    let w3 = qaq(w1,w2);
    let w3_ = w1_ + w2_ + abs($w3);
    let $w4 = $tq2*$b2b3;
    let w4 = qmq(tq2,b2b3);
    let w4_ = 2*abs($w4)
    //let vₓₓ = (u1*b3b3 + q3*(b1b3 - b2b2)) + tq2*b2b3;
    let $vₓₓ = $w3 + $w4;
    let vₓₓ = qaq(w3, w4);
    let vₓₓ_ = w3_ + w4_ + abs($vₓₓ);


    let $w5 = $u1*$a3a3;
    let w5 = qmq(u1,a3a3);
    let w5_ = 2*abs($w5);
    let $w6 = $q3*$t2;
    let w6 = qmq(q3,t2);
    let w6_ = 2*abs($w6);
    let $w7 = $w5 + $w6;
    let w7 = qaq(w5,w6);
    let w7_ = w5_ + w6_ + abs($w7);
    let $w8 = $tq2*$a2a3;
    let w8 = qmq(tq2,a2a3);
    let w8_ = 2*abs($w8);
    //let vᵧᵧ = (u1*a3a3 + q3*t2) + tq2*a2a3;
    let $vᵧᵧ = $w7 + $w8;
    let vᵧᵧ = qaq(w7,w8);
    let vᵧᵧ_ = w7_ + w8_ + abs($vᵧᵧ);
    

    // 47-bit aligned => wa = a2b2 - p2/2 -> error free
    let $wa = $a2b2 - $p2/2;
    let wa = qdq(a2b2,qd2(p2));
    let $wb = $u1*$a3b3;
    let wb = qmq(u1,a3b3);
    let wb_ = 2*abs($wb);
    let $wc = $q2*$p1;
    let wc = qmq(q2,p1);
    let wc_ = 2*abs($wc);
    let $wd = $wb + $wc;
    let wd = qaq(wb,wc);
    let wd_ = wb_ + wc_ + abs($wd);
    let $wq = $q3*$wa;
    let wq = qmq(q3,wa);
    let wq_ = 2*abs($wq);
    //let vₓᵧ = 2*(q3*(a2b2 - p2/2) - (u1*a3b3 + q2*p1));
    let $vₓᵧ = 2*($wq - $wd);
    let vₓᵧ = qm2(qdq(wq,wd));
    let vₓᵧ_ = 2*(wq_ + wd_) + abs($vₓᵧ);


    let $wr = -3*$q1q1;
    let wr = qmd(-3,q1q1);
    let wr_ = 3*q1q1_ + abs($wr);
    let $we = $wr - 2*$q1q5;
    let we = qdq(wr,qm2(q1q5));
    let we_ = wr_ + 2*q1q5_ + abs($we);
    let $wf = $tq2q4 + $q3q6;
    let wf = qaq(tq2q4,q3q6);
    let wf_ = tq2q4_ + q3q6_ + abs($wf);
    //let s1 = (-3*q1q1 - 2*q1q5) + (tq2q4 + q3q6);
    let $s1 = $we + $wf;
    let s1 = qaq(we,wf);
    let s1_ = we_ + wf_ + abs($s1);


    //let s2 = 2*(q1q2 - q3q4);
    let $s2 = 2*($q1q2 - $q3q4);
    let s2 = qm2(qdq(q1q2,q3q4));
    let s2_ = 2*(q1q2_ + q3q4_) + abs($s2);


    let $wl = $q1q3 - $q2q2;
    let wl = qdq(q1q3,q2q2);
    let wl_ = q1q3_ + q2q2_ + abs($wl);
    //let s3 = q1q3 - q2q2 + q3q5;
    let $s3 = $wl + $q3q5;
    let s3 = qaq(wl,q3q5);
    let s3_ = wl_ + q3q5_ + abs($s3);

    
    let $wm = b3*$s1;
    let wm = qmd(b3,s1); 
    let wm_ = abs(b3)*s1_ + abs($wm);
    let $ws = b2*$s2;
    let ws = qmd(b2,s2);
    let ws_ = abs(b2)*s2_ + abs($ws);
    let $wt = b1*$s3;
    let wt = qmd(b1,s3);
    let wt_ = abs(b1)*s3_ + abs($wt);
    let $wn = $ws + $wt;
    let wn = qaq(ws,wt);
    let wn_ = ws_ + wt_ + abs($wn);
    //let vₓ = b3*s1 + (b2*s2 + b1*s3);
    let $vₓ = $wm + $wn;
    let vₓ = qaq(wm,wn);
    let vₓ_ = wm_ + wn_ + abs($vₓ);


    let $wo = a3*$s1;
    let wo = qmd(a3,s1);
    let wo_ = abs(a3)*s1_ + abs($wo);
    let $wu = a2*$s2;
    let wu = qmd(a2,s2);
    let wu_ = abs(a2)*s2_ + abs($wu);
    let $wv = a1*$s3;
    let wv = qmd(a1,s3);
    let wv_ = abs(a1)*s3_ + abs($wv);
    let $wp = $wu + $wv;
    let wp = qaq(wu,wv);
    let wp_ = wu_ + wv_ + abs($wp);
    //let vᵧ = -a3*s1 - (a2*s2 + a1*s3);
    let $vᵧ = -($wo + $wp);
    let vᵧ = qno(qaq(wo,wp));
    let vᵧ_ = wo_ + wp_ + abs($vᵧ);


    let $v3 = $tq2q4 - $q1q1;
    let v3 = qdq(tq2q4,q1q1);
    let v3_ = tq2q4_ + q1q1_ + abs($v3);
    let $v1 = $v3 - $q1q5;
    let v1 = qdq(v3,q1q5);
    let _v1 = abs($v1);
    let v1_ = v3_ + q1q5_ + _v1;
    let $v4 = $s3*$q6;
    let v4 = qmq(s3,q6);
    let v4_ = s3_*abs($q6) + 2*abs($v4);
    let $v5 = $q3q4*$q4;
    let v5 = qmq(q3q4,q4);
    let v5_ = q3q4_*abs($q4) + 2*abs($v5);
    let $v2 = $v4 - $v5;
    let v2 = qdq(v4,v5);
    let v2_ = v4_ + v5_ + abs($v2);
    let $v6 = $q1*$v1;
    let v6 = qmq(q1,v1);
    let v6_ = abs($q1)*v1_ + 2*abs($v6);
    
    //let v = q1*(tq2q4 - q1q1 - q1q5) + s3*q6 - q3q4*q4;
    let $v = $v6 + $v2;
    let v = qaq(v6,v2);
    let v_ = v6_ + v2_ + abs($v);

        
    return { 
        coeffs: { vₓₓₓ, vₓₓᵧ, vₓᵧᵧ, vᵧᵧᵧ, vₓₓ, vₓᵧ, vᵧᵧ, vₓ, vᵧ, v },
        errorBound: { vₓₓₓ_, vₓₓᵧ_, vₓᵧᵧ_, vᵧᵧᵧ_, vₓₓ_, vₓᵧ_, vᵧᵧ_, vₓ_, vᵧ_, v_ }
    }
}


export { getImplicitForm3Quad }
