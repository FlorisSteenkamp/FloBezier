
import { getX } from '../../to-power-basis/get-x';
import { getY } from '../../to-power-basis/get-y';
import { 
    qSum, twoProduct, qMultDouble2, qMultBy2, qMultQuad, 
    qNegativeOf, qMultBy4, qMultByNeg2, qMultByNeg4 
} from 'flo-numerical';


const tp  = twoProduct;
const qno = qNegativeOf;
const qm2 = qMultBy2;
const qm4 = qMultBy4;
const qn2 = qMultByNeg2;
const qn4 = qMultByNeg4;
const qmd = qMultDouble2;
const qmq = qMultQuad;


/**
 * Returns the exact implicit form of the given cubic bezier - calculated in
 * quad precision.
 * * precondition: 53-4 === 49-bit bit-aligned coefficient bitlength (this is
 * to improve speed considerably due to simpler summing and multiplication)
 * Modified from http://www.mare.ee/indrek/misc/2d.pdf
 * @param ps 
 */
function getImplicitForm3Quad(ps: number[][]) {
    // The implicit form is given by:
    // vₓₓₓx³ + vₓₓᵧx²y + vₓᵧᵧxy² + vᵧᵧᵧy³ + vₓₓx² +vₓᵧxy + vᵧᵧy² + vₓx + vᵧy + v = 0

    // getX, getY requires the coefficients of ps to be 49 bits
    
    // THIS ARGUMENT NOW VOID - we assume 
    // another 3 bits (=== ceil(log2(3)) lost due to multiplication by 6 in some 
    // places, otherwise we had to use slower operators during the calculations.
    let [a3, a2, a1, a0] = getX(ps);
    let [b3, b2, b1, b0] = getY(ps);

    // the below are all error-free of course
    let a0a0 = tp(a0,a0);
    let a0a1 = tp(a0,a1);
    let a0a2 = tp(a0,a2);
    let a0a3 = tp(a0,a3);
    let a1a1 = tp(a1,a1);
    let a1a2 = tp(a1,a2);
    let a1a3 = tp(a1,a3);
    let a2a2 = tp(a2,a2);
    let a2a3 = tp(a2,a3);
    let a3a3 = tp(a3,a3);

    let b0b0 = tp(b0,b0);
    let b0b1 = tp(b0,b1);
    let b0b2 = tp(b0,b2);
    let b0b3 = tp(b0,b3);
    let b1b1 = tp(b1,b1);
    let b1b2 = tp(b1,b2);
    let b1b3 = tp(b1,b3);
    let b2b2 = tp(b2,b2);
    let b2b3 = tp(b2,b3);
    let b3b3 = tp(b3,b3);

    let a0b0 = tp(a0,b0);
    let a0b1 = tp(a0,b1);
    let a0b2 = tp(a0,b2);
    let a0b3 = tp(a0,b3);
    let a1b0 = tp(a1,b0);
    //let a1b1 = tp(a1,b1);
    let a1b2 = tp(a1,b2);
    //let a1b3 = tp(a1,b3);
    let a2b0 = tp(a2,b0);
    let a2b1 = tp(a2,b1);
    let a2b2 = tp(a2,b2);
    let a2b3 = tp(a2,b3);
    let a3b0 = tp(a3,b0);
    let a3b1 = tp(a3,b1);
    let a3b2 = tp(a3,b2);
    let a3b3 = tp(a3,b3);

    // NOTE: In the error bounds calculated below we assume not the theoretical
    // tightest error bounds but the practical ones.
    // Also, qMultDouble2 is used instead of qMultDouble1 due to the tradeoff
    // between speed and accuracy.
    // Also, pairwise summation is not currently used due to increased code
    // complexity but should reduce the error about 4 times which is quite small
    // considering it could easily all but swamped by the condition number.

    // let vₓₓₓ = b3*b3*b3;
    let vₓₓₓ = qmd(b3,b3b3); // γγ3
    // let vₓₓᵧ = -3*a3*b3*b3;
    let vₓₓᵧ = qmq(b3b3,tp(-3,a3)); // γγ5
    // let vₓᵧᵧ = 3*b3*a3*a3;
    let vₓᵧᵧ = qmq(a3a3,tp(3,b3)); // γγ5
    // let vᵧᵧᵧ = -a3*a3*a3;
    let vᵧᵧᵧ = qmd(-a3,a3a3); // γγ3

    // let vₓₓ = -3*a3*b1*b2*b3 + a1*b2*b3*b3 - a2*b3*b2*b2 + 2*a2*b1*b3*b3 + 
    //           3*a3*b0*b3*b3 + a3*b2*b2*b2 - 3*a0*b3*b3*b3;
    // γγ44 === 3*γγ8 + 4*γγ5
    let vₓₓ = qSum([
           qmd(-3,qmq(a3b1, b2b3)),  // γγ8
                  qmq(a1b2, b3b3),   // γγ5
              qno(qmq(a2b2, b2b3)),  // γγ5
              qm2(qmq(a2b1, b3b3)),  // γγ5
            qmd(3,qmq(a3b0, b3b3)),  // γγ8 
                  qmq(b2b2, a3b2),   // γγ5
           qmd(-3,qmq(a0b3, b3b3))   // γγ8 
    ]);
    
    // let vₓᵧ = a1*a3*b2*b3 - a2*a3*b1*b3 - 6*b0*b3*a3*a3 - 3*a1*a2*b3*b3 - 
    //           2*a2*a3*b2*b2 + 2*b2*b3*a2*a2 + 3*b1*b2*a3*a3 + 6*a0*a3*b3*b3;
    // γγ52 === 4*γγ8 + 4*γγ5
    let vₓᵧ = qSum([
                  qmq(a1a3,b2b3),   // γγ5
              qno(qmq(a2b1,a3b3)),  // γγ5
           qmd(-6,qmq(b0b3,a3a3)),  // γγ8
           qmd(-3,qmq(a1a2,b3b3)),  // γγ8
              qn2(qmq(a2a3,b2b2)),  // γγ5 
              qm2(qmq(b2b3,a2a2)),  // γγ5
           qmd(3, qmq(b1b2,a3a3)),  // γγ8 
           qmd(6, qmq(a0a3,b3b3))   // γγ8 
    ]);

    // let vᵧᵧ = 3*a1*a2*a3*b3 + a3*b2*a2*a2 - a2*b1*a3*a3 - 3*a0*b3*a3*a3 - 
    //           2*a1*b2*a3*a3 - b3*a2*a2*a2 + 3*b0*a3*a3*a3;
    // γγ44 === 3*γγ8 + 4*γγ5
    let vᵧᵧ = qSum([
           qmd(3, qmq(a1a2,a3b3)),  // γγ8
                  qmq(a2a2,a3b2),   // γγ5
              qno(qmq(a2b1,a3a3)),  // γγ5
           qmd(-3,qmq(a0b3,a3a3)),  // γγ8
              qn2(qmq(a1b2,a3a3)),  // γγ5
              qno(qmq(a2a2,a2b3)),  // γγ5
           qmd(3, qmq(a3b0,a3a3))   // γγ8
    ]);

    // let vₓ = a2*a3*b0*b1*b3 - a1*a2*b1*b2*b3 - a1*a3*b0*b2*b3 + 
    //          6*a0*a3*b1*b2*b3 + b1*a1*a1*b3*b3 + b3*a2*a2*b1*b1 + 
    //          3*b3*a3*a3*b0*b0 + a1*a3*b1*b2*b2 - a2*a3*b2*b1*b1 - 
    //          6*a0*a3*b0*b3*b3 - 4*a0*a2*b1*b3*b3 - 3*b0*b1*b2*a3*a3 -
    //          2*a0*a1*b2*b3*b3 - 2*a1*a3*b3*b1*b1 - 2*b0*b2*b3*a2*a2 + 
    //          2*a0*a2*b3*b2*b2 + 2*a2*a3*b0*b2*b2 + 3*a1*a2*b0*b3*b3 + 
    //          a3*a3*b1*b1*b1 + 3*a0*a0*b3*b3*b3 - 2*a0*a3*b2*b2*b2;
    // γγ180 === 15*γγ8 + 6*γγ10
    let vₓ = qSum([
              qmd(a2,qmq(a3b0,b1b3)), // γγ8
             qmd(-a1,qmq(a2b1,b2b3)), // γγ8
             qmd(-a1,qmq(a3b0,b2b3)), // γγ8
        qmq(tp(6,a0),qmq(a3b1,b2b3)), // γγ10
              qmd(b1,qmq(a1a1,b3b3)), // γγ8
              qmd(b3,qmq(a2a2,b1b1)), // γγ8
        qmq(tp(3,b3),qmq(a3a3,b0b0)), // γγ10
              qmd(a1,qmq(a3b1,b2b2)), // γγ8
             qmd(-a2,qmq(a3b2,b1b1)), // γγ8
       qmq(tp(-6,a0),qmq(a3b0,b3b3)), // γγ10
           qmd(-4*a0,qmq(a2b1,b3b3)), // γγ8
       qmq(tp(-3,b0),qmq(b1b2,a3a3)), // γγ10
           qmd(-2*a0,qmq(a1b2,b3b3)), // γγ8
           qmd(-2*a1,qmq(a3b3,b1b1)), // γγ8
           qmd(-2*b0,qmq(b2b3,a2a2)), // γγ8
            qmd(2*a0,qmq(a2b3,b2b2)), // γγ8
            qmd(2*a2,qmq(a3b0,b2b2)), // γγ8
        qmq(tp(3,a1),qmq(a2b0,b3b3)), // γγ10
              qmd(a3,qmq(a3b1,b1b1)), // γγ8
        qmq(tp(3,a0),qmq(a0b3,b3b3)), // γγ10
           qmd(-2*a0,qmq(a3b2,b2b2))  // γγ8
    ]);

    // let vᵧ = a0*a2*a3*b1*b3 + a1*a2*a3*b1*b2 - a0*a1*a3*b2*b3 - 
    //          6*a1*a2*a3*b0*b3 - a1*a1*a1*b3*b3 - 3*a3*a3*a3*b0*b0 - 
    //          a1*a3*a3*b1*b1 - a3*a1*a1*b2*b2 - 3*a3*a0*a0*b3*b3 + 
    //          a2*b2*b3*a1*a1 - a1*b1*b3*a2*a2 - 3*a0*b1*b2*a3*a3 - 
    //          2*a0*b2*b3*a2*a2 - 2*a3*b0*b2*a2*a2 + 2*a0*a2*a3*b2*b2 + 
    //          2*a2*b0*b1*a3*a3 + 2*a3*b1*b3*a1*a1 + 3*a0*a1*a2*b3*b3 + 
    //          4*a1*b0*b2*a3*a3 + 6*a0*b0*b3*a3*a3 + 2*b0*b3*a2*a2*a2;
    // γγ180 === 15*γγ8 + 6*γγ10
    let vᵧ = qSum([
               qmd(a0,qmq(a2a3,b1b3)),  // γγ8
               qmd(a1,qmq(a2a3,b1b2)),  // γγ8     
              qmd(-a0,qmq(a1a3,b2b3)),  // γγ8
        qmq(tp(-6,a1),qmq(a2a3,b0b3)),  // γγ10
              qmd(-a1,qmq(a1a1,b3b3)),  // γγ8
        qmq(tp(-3,a3),qmq(a3a3,b0b0)),  // γγ10
              qmd(-a1,qmq(a3a3,b1b1)),  // γγ8
              qmd(-a3,qmq(a1a1,b2b2)),  // γγ8
        qmq(tp(-3,a3),qmq(a0a0,b3b3)),  // γγ10
               qmd(a2,qmq(b2b3,a1a1)),  // γγ8     
              qmd(-a1,qmq(b1b3,a2a2)),  // γγ8
        qmq(tp(-3,a0),qmq(b1b2,a3a3)),  // γγ10
            qmd(-2*a0,qmq(b2b3,a2a2)),  // γγ8
            qmd(-2*a3,qmq(b0b2,a2a2)),  // γγ8
             qmd(2*a0,qmq(a2a3,b2b2)),  // γγ8
             qmd(2*a2,qmq(b0b1,a3a3)),  // γγ8 
             qmd(2*a3,qmq(b1b3,a1a1)),  // γγ8 
         qmq(tp(3,a0),qmq(a1a2,b3b3)),  // γγ10
             qmd(4*a1,qmq(b0b2,a3a3)),  // γγ8 
         qmq(tp(6,a0),qmq(b0b3,a3a3)),  // γγ10 
             qmd(2*b0,qmq(a2b3,a2a2))   // γγ8 
    ]);


    // let v = a0*a1*a2*b1*b2*b3 + a0*a1*a3*b0*b2*b3 - a0*a2*a3*b0*b1*b3 - 
    //          a1*a2*a3*b0*b1*b2 + b0*a1*a1*a1*b3*b3 - b3*a2*a2*a2*b0*b0 + 
    //          a1*b0*a3*a3*b1*b1 + a1*b2*a0*a0*b3*b3 + a3*b0*a1*a1*b2*b2 + 
    //          a3*b2*a2*a2*b0*b0 - a0*b1*a1*a1*b3*b3 - a0*b3*a2*a2*b1*b1 - 
    //          a2*b1*a3*a3*b0*b0 - a2*b3*a0*a0*b2*b2 - 3*a0*b3*a3*a3*b0*b0 - 
    //          2*a1*b2*a3*a3*b0*b0 + 2*a2*b1*a0*a0*b3*b3 + 3*a3*b0*a0*a0*b3*b3 + 
    //          a0*a2*a3*b2*b1*b1 + a1*b0*b1*b3*a2*a2 - a0*a1*a3*b1*b2*b2 - 
    //          a2*b0*b2*b3*a1*a1 - 3*a0*a1*a2*b0*b3*b3 - 3*a3*b1*b2*b3*a0*a0 - 
    //          2*a0*a2*a3*b0*b2*b2 - 2*a3*b0*b1*b3*a1*a1 + 2*a0*a1*a3*b3*b1*b1 + 
    //          2*a0*b0*b2*b3*a2*a2 + 3*a0*b0*b1*b2*a3*a3 + 3*a1*a2*a3*b3*b0*b0 + 
    //          a3*a3*a3*b0*b0*b0 - a0*a0*a0*b3*b3*b3 + a3*a0*a0*b2*b2*b2 - 
    //          a0*a3*a3*b1*b1*b1;
    // γγ358 === 28*γγ10 + 6*γγ13
    // note: with pairwise summation the above can be reduced to γγ50 - this 
    // will save about 3 bits and may well be worth the effort
    let v = qSum([ // 34 terms, each with 6 multiplicants
        qmq(     a0a1,qmq(a2b1,b2b3)),  // γγ10
        qmq(     a0a1,qmq(a3b0,b2b3)),  // γγ10 
        qmq(qno(a0a2),qmq(a3b0,b1b3)),  // γγ10
        qmq(qno(a1a2),qmq(a3b0,b1b2)),  // γγ10
        qmq(     a1b0,qmq(a1a1,b3b3)),  // γγ10
        qmq(qno(a2b3),qmq(a2a2,b0b0)),  // γγ10
        qmq(     a1b0,qmq(a3a3,b1b1)),  // γγ10
        qmq(     a1b2,qmq(a0a0,b3b3)),  // γγ10
        qmq(     a3b0,qmq(a1a1,b2b2)),  // γγ10
        qmq(     a3b2,qmq(a2a2,b0b0)),  // γγ10
        qmq(qno(a0b1),qmq(a1a1,b3b3)),  // γγ10
        qmq(qno(a0b3),qmq(a2a2,b1b1)),  // γγ10
        qmq(qno(a2b1),qmq(a3a3,b0b0)),  // γγ10
        qmq(qno(a2b3),qmq(a0a0,b2b2)),  // γγ10
     qmq(qmd(-3,a0b3),qmq(a3a3,b0b0)),  // γγ13
        qmq(qn2(a1b2),qmq(a3a3,b0b0)),  // γγ10
        qmq(qm2(a2b1),qmq(a0a0,b3b3)),  // γγ10
      qmq(qmd(3,a3b0),qmq(a0a0,b3b3)),  // γγ13
        qmq(     a0a2,qmq(a3b2,b1b1)),  // γγ10
        qmq(     a1b0,qmq(b1b3,a2a2)),  // γγ10
        qmq(qno(a0a1),qmq(a3b1,b2b2)),  // γγ10
        qmq(qno(a2b0),qmq(b2b3,a1a1)),  // γγ10
     qmq(qmd(-3,a0a1),qmq(a2b0,b3b3)),  // γγ13
     qmq(qmd(-3,a3b1),qmq(b2b3,a0a0)),  // γγ13
        qmq(qn2(a0a2),qmq(a3b0,b2b2)),  // γγ10
        qmq(qn2(a3b0),qmq(b1b3,a1a1)),  // γγ10
        qmq(qm2(a0a1),qmq(a3b3,b1b1)),  // γγ10
        qmq(qm2(a0b0),qmq(b2b3,a2a2)),  // γγ10
      qmq(qmd(3,a0b0),qmq(b1b2,a3a3)),  // γγ13
      qmq(qmd(3,a1a2),qmq(a3b3,b0b0)),  // γγ13
        qmq(     a3a3,qmq(a3b0,b0b0)),  // γγ10
        qmq(qno(a0a0),qmq(a0b3,b3b3)),  // γγ10
        qmq(     a0a3,qmq(a0b2,b2b2)),  // γγ10        
        qmq(qno(a0a3),qmq(a3b1,b1b1))   // γγ10
    ]);

    return { vₓₓₓ, vₓₓᵧ, vₓᵧᵧ, vᵧᵧᵧ, vₓₓ, vₓᵧ, vᵧᵧ, vₓ, vᵧ, v }
}


export { getImplicitForm3Quad }
