
import { getX } from '../../to-power-basis/get-x';
import { getY } from '../../to-power-basis/get-y';
import { 
    γ2, γ3, γ4, γ5, γ6, γ7, γ8, γ9, 
    γ10, γ11
} from '../../error-analysis/error-analysis';


/**
 * Returns an approximate implicit form of the given cubic bezier.
 * @param ps 
 */
function getImplicitForm3(ps: number[][]) {
    return getImplicitForm3Parametric(
        getX(ps), 
        getY(ps)
    );
}


/**
 * Returns an approximate implicit form coefficientwise error bound of the given 
 * cubic bezier.
 * @param ps 
 */
function getImplicitForm3ErrorBound(ps: number[][]) {
    let coeffsX = getX(ps);
    let coeffsY = getY(ps);
    let { vₓₓₓ, vₓₓᵧ, vₓᵧᵧ, vᵧᵧᵧ, vₓₓ, vₓᵧ, vᵧᵧ, vₓ, vᵧ, v } =
        getImplicitForm3ParametricAbs(
            coeffsX, 
            coeffsY
        );

    // below we use for the subscript of gamma the formula n + m - 2 where
    // n === the number of terms, 
    // m === the max number of multiplicands per term (thats not a power of 2)
    return {
        vₓₓₓ: γ2  * vₓₓₓ, // γ(2)
        vₓₓᵧ: γ3  * vₓₓᵧ, // γ(3)
        vₓᵧᵧ: γ3  * vₓᵧᵧ, // γ(3)
        vᵧᵧᵧ: γ2  * vᵧᵧᵧ, // γ(2)
        vₓₓ : γ7  * vₓₓ,  // γ(6)  = γ(3+3)
        vₓᵧ : γ7  * vₓᵧ,  // γ(6)  = γ(3+3)
        vᵧᵧ : γ7  * vᵧᵧ,  // γ(6)  = γ(3+3)
        vₓ  : γ10 * vₓ ,  // γ(10) = γ(5+5)
        vᵧ  : γ10 * vᵧ ,  // γ(10) = γ(5+5)
        v   : γ11 * v  ,  // γ(11) = γ(6+5)
    }
}


let abs = Math.abs;


/**
 * Returns an approximate implicit form error bound coefficients of the given 
 * cubic bezier given as a parametric equation (as opposed to control points).
 * Taken from http://www.mare.ee/indrek/misc/2d.pdf
 */
function getImplicitForm3ParametricAbs(
        coeffsX: number[],
        coeffsY: number[]) {

    // The implicit form is given by:
    // vₓₓₓx³ + vₓₓᵧx²y + vₓᵧᵧxy² + vᵧᵧᵧy³ + vₓₓx² +vₓᵧxy + vᵧᵧy² + vₓx + vᵧy + v = 0

    let [a3, a2, a1, a0] = coeffsX;
    let [b3, b2, b1, b0] = coeffsY;

    // n === the number of terms, 
    // m === the max number of multiplicands per term (thats not a power of 2)
    // m,n above has been modified ( -> ) to take pairwise addition and 
    // multiplication into account, i.e. n -> ceil(log2(n)), m -> ceil(log2(m))
    let vₓₓₓ = abs(  b3*b3*b3); // n,m = 1,3 -> no improvement possible
    let vₓₓᵧ = abs(3*a3*b3*b3); // n,m = 1,4 -> 1,3
    let vₓᵧᵧ = abs(3*b3*a3*a3); // n,m = 1,4 -> 1,3
    let vᵧᵧᵧ = abs(  a3*a3*a3); // n,m = 1,3 -> no improvement possible

    let vₓₓ = // n,m = 7,5 -> 3,3
        abs(3*a3*b1*b2*b3) + 
        abs(  a1*b2*b3*b3) + 
        abs(  a2*b3*b2*b2) + 
        abs(2*a2*b1*b3*b3) + 
        abs(3*a3*b0*b3*b3) + 
        abs(  a3*b2*b2*b2) + 
        abs(3*a0*b3*b3*b3);

    let vₓᵧ = // n,m = 8,5 -> 3,3
        abs(  a1*a3*b2*b3) + 
        abs(  a2*a3*b1*b3) + 
        abs(6*b0*b3*a3*a3) + 
        abs(3*a1*a2*b3*b3) + 
        abs(2*a2*a3*b2*b2) + 
        abs(2*b2*b3*a2*a2) + 
        abs(3*b1*b2*a3*a3) + 
        abs(6*a0*a3*b3*b3);

    let vᵧᵧ = // n,m = 7,5 -> 3,3
        abs(3*a1*a2*a3*b3) + 
        abs(  a3*b2*a2*a2) + 
        abs(  a2*b1*a3*a3) + 
        abs(3*a0*b3*a3*a3) + 
        abs(2*a1*b2*a3*a3) + 
        abs(  b3*a2*a2*a2) + 
        abs(3*b0*a3*a3*a3);

    let vₓ = // n,m = 21,6 -> 5,5
        abs(  a2*a3*b0*b1*b3) + 
        abs(  a1*a2*b1*b2*b3) + 
        abs(  a1*a3*b0*b2*b3) + 
        abs(6*a0*a3*b1*b2*b3) + 
        abs(  b1*a1*a1*b3*b3) + 
        abs(  b3*a2*a2*b1*b1) + 
        abs(3*b3*a3*a3*b0*b0) + 
        abs(  a1*a3*b1*b2*b2) + 
        abs(  a2*a3*b2*b1*b1) + 
        abs(6*a0*a3*b0*b3*b3) + 
        abs(4*a0*a2*b1*b3*b3) + 
        abs(3*b0*b1*b2*a3*a3) +
        abs(2*a0*a1*b2*b3*b3) + 
        abs(2*a1*a3*b3*b1*b1) + 
        abs(2*b0*b2*b3*a2*a2) + 
        abs(2*a0*a2*b3*b2*b2) + 
        abs(2*a2*a3*b0*b2*b2) + 
        abs(3*a1*a2*b0*b3*b3) + 
        abs(  a3*a3*b1*b1*b1) + 
        abs(3*a0*a0*b3*b3*b3) + 
        abs(2*a0*a3*b2*b2*b2);

    let vᵧ = // n,m = 21,6 -> 5,5
        abs(  a0*a2*a3*b1*b3) + 
        abs(  a1*a2*a3*b1*b2) + 
        abs(  a0*a1*a3*b2*b3) + 
        abs(6*a1*a2*a3*b0*b3) + 
        abs(  a1*a1*a1*b3*b3) + 
        abs(3*a3*a3*a3*b0*b0) + 
        abs(  a1*a3*a3*b1*b1) + 
        abs(  a3*a1*a1*b2*b2) + 
        abs(3*a3*a0*a0*b3*b3) + 
        abs(  a2*b2*b3*a1*a1) + 
        abs(  a1*b1*b3*a2*a2) + 
        abs(3*a0*b1*b2*a3*a3) + 
        abs(2*a0*b2*b3*a2*a2) + 
        abs(2*a3*b0*b2*a2*a2) + 
        abs(2*a0*a2*a3*b2*b2) + 
        abs(2*a2*b0*b1*a3*a3) + 
        abs(2*a3*b1*b3*a1*a1) + 
        abs(3*a0*a1*a2*b3*b3) + 
        abs(4*a1*b0*b2*a3*a3) + 
        abs(6*a0*b0*b3*a3*a3) + 
        abs(2*b0*b3*a2*a2*a2);

    let v = // n,m = 34,7 -> 6,5
        abs(  a0*a1*a2*b1*b2*b3) + 
        abs(  a0*a1*a3*b0*b2*b3) + 
        abs(  a0*a2*a3*b0*b1*b3) + 
        abs(  a1*a2*a3*b0*b1*b2) + 
        abs(  b0*a1*a1*a1*b3*b3) + 
        abs(  b3*a2*a2*a2*b0*b0) + 
        abs(  a1*b0*a3*a3*b1*b1) + 
        abs(  a1*b2*a0*a0*b3*b3) + 
        abs(  a3*b0*a1*a1*b2*b2) + 
        abs(  a3*b2*a2*a2*b0*b0) + 
        abs(  a0*b1*a1*a1*b3*b3) + 
        abs(  a0*b3*a2*a2*b1*b1) + 
        abs(  a2*b1*a3*a3*b0*b0) + 
        abs(  a2*b3*a0*a0*b2*b2) + 
        abs(3*a0*b3*a3*a3*b0*b0) + 
        abs(2*a1*b2*a3*a3*b0*b0) + 
        abs(2*a2*b1*a0*a0*b3*b3) + 
        abs(3*a3*b0*a0*a0*b3*b3) + 
        abs(  a0*a2*a3*b2*b1*b1) + 
        abs(  a1*b0*b1*b3*a2*a2) + 
        abs(  a0*a1*a3*b1*b2*b2) + 
        abs(  a2*b0*b2*b3*a1*a1) + 
        abs(3*a0*a1*a2*b0*b3*b3) + 
        abs(3*a3*b1*b2*b3*a0*a0) + 
        abs(2*a0*a2*a3*b0*b2*b2) + 
        abs(2*a3*b0*b1*b3*a1*a1) + 
        abs(2*a0*a1*a3*b3*b1*b1) + 
        abs(2*a0*b0*b2*b3*a2*a2) + 
        abs(3*a0*b0*b1*b2*a3*a3) + 
        abs(3*a1*a2*a3*b3*b0*b0) + 
        abs(  a3*a3*a3*b0*b0*b0) + 
        abs(  a0*a0*a0*b3*b3*b3) + 
        abs(  a3*a0*a0*b2*b2*b2) + 
        abs(  a0*a3*a3*b1*b1*b1);

    return { vₓₓₓ, vₓₓᵧ, vₓᵧᵧ, vᵧᵧᵧ, vₓₓ, vₓᵧ, vᵧᵧ, vₓ, vᵧ, v }
}


/**
 * Returns an approximate implicit form of the given cubic bezier given as
 * a parametric equation (as opposed to control points).
 * Taken from http://www.mare.ee/indrek/misc/2d.pdf
 */
function getImplicitForm3Parametric(
        coeffsX: number[],
        coeffsY: number[]) {

    // The implicit form is given by:
    // vₓₓₓx³ + vₓₓᵧx²y + vₓᵧᵧxy² + vᵧᵧᵧy³ + vₓₓx² +vₓᵧxy + vᵧᵧy² + vₓx + vᵧy + v = 0

    let [a3, a2, a1, a0] = coeffsX;
    let [b3, b2, b1, b0] = coeffsY;

    let vₓₓₓ =    b3*b3*b3;
    let vₓₓᵧ = (-3*a3)*(b3*b3);
    let vₓᵧᵧ =  (3*b3)*(a3*a3);
    let vᵧᵧᵧ =   -a3*a3*a3;

    let vₓₓ = 
       (((-3*a3*b1)*(b2*b3) + 
            (a1*b2)*(b3*b3)) + 
          ((-a2*b3)*(b2*b2) + 
          (2*a2*b1)*(b3*b3))) + 
        (((3*a3*b0)*(b3*b3) + 
            (a3*b2)*(b2*b2)) + 
         (-3*a0*b3)*(b3*b3));
    
    let vₓᵧ = 
         (((a1*a3)*(b2*b3) + 
          (-a2*a3)*(b1*b3)) + 
       ((-6*b0*b3)*(a3*a3) + 
        (-3*a1*a2)*(b3*b3))) + 
      (((-2*a2*a3)*(b2*b2) + 
         (2*b2*b3)*(a2*a2)) + 
        ((3*b1*b2)*(a3*a3) + 
         (6*a0*a3)*(b3*b3)));
    
    let vᵧᵧ = 
      (((3*a1*a2)*(a3*b3) + 
          (a3*b2)*(a2*a2)) + 
        ((-a2*b1)*(a3*a3) + 
       (-3*a0*b3)*(a3*a3))) + 
      ((-2*a1*b2)*(a3*a3) + 
         (-b3*a2)*(a2*a2)) + 
        (3*b0*a3)*(a3*a3);

    let vₓ = 
       ((((a2*(a3*b0)*(b1*b3) + 
          -a1*(a2*b1)*(b2*b3)) + 
         (-a1*(a3*b0)*(b2*b3) + 
       (6*a0)*(a3*b1)*(b2*b3))) + 
         ((b1*(a1*a1)*(b3*b3) + 
           b3*(a2*a2)*(b1*b1)) + 
       ((3*b3)*(a3*a3)*(b0*b0) + 
           a1*(a3*b1)*(b2*b2)))) + 
       (((-a2*(a3*b2)*(b1*b1) + 
      (-6*a0)*(a3*b0)*(b3*b3)) + 
     ((-4*a0)*(a2*b1)*(b3*b3) + 
      (-3*b0)*(b1*b2)*(a3*a3))) +
      ((-2*a0*(a1*b2)*(b3*b3) + 
        -2*a1*(a3*b3)*(b1*b1)) + 
       (-2*b0*(b2*b3)*(a2*a2) + 
         2*a0*(a2*b3)*(b2*b2))))) + 
       ((2*a2*(a3*b0)*(b2*b2) + 
        (3*a1)*(a2*b0)*(b3*b3)) + 
          (a3*(a3*b1)*(b1*b1) + 
        (3*a0)*(a0*b3)*(b3*b3))) + 
        -2*a0*(a3*b2)*(b2*b2);
    
    let vᵧ = 
       ((((a0*(a2*a3)*(b1*b3) + 
           a1*(a2*a3)*(b1*b2)) + 
         (-a0*(a1*a3)*(b2*b3) + 
       (-6*a1)*(a2*a3)*(b0*b3))) + 
        ((-a1*(a1*a1)*(b3*b3) + 
      (-3*a3)*(a3*a3)*(b0*b0)) + 
         (-a1*(a3*a3)*(b1*b1) + 
          -a3*(a1*a1)*(b2*b2)))) + 
    ((((-3*a3)*(a0*a0)*(b3*b3) + 
           a2*(b2*b3)*(a1*a1)) + 
         (-a1*(b1*b3)*(a2*a2) + 
      (-3*a0)*(b1*b2)*(a3*a3))) + 
      ((-2*a0*(b2*b3)*(a2*a2) + 
      (-2*a3)*(b0*b2)*(a2*a2)) + 
        (2*a0*(a2*a3)*(b2*b2) + 
         2*a2*(b0*b1)*(a3*a3))))) + 
      (((2*a3*(b1*b3)*(a1*a1) + 
       (3*a0)*(a1*a2)*(b3*b3)) + 
        (4*a1*(b0*b2)*(a3*a3) + 
       (6*a0)*(b0*b3)*(a3*a3))) + 
         2*b0*(b3*a2)*(a2*a2));

    // pairwise summation reduces rounding errors a bit (but is it slightly slower?)    
    // pairwise products also recuces rounding errors a bit
    // speed might be increased by caching say a2*a2 === a2a2, etc.
    let v = 
       ((((((a0*a1)*((a2*b1)*(b2*b3)) + 
            (a0*a1)*((a3*b0)*(b2*b3))) + 
          ((-a0*a2)*((a3*b0)*(b1*b3)) + 
           (-a1*a2)*((a3*b0)*(b1*b2)))) + 
          (((b0*a1)*((a1*a1)*(b3*b3)) + 
           (-b3*a2)*((a2*a2)*(b0*b0))) + 
           ((a1*b0)*((a3*a3)*(b1*b1)) + 
            (a1*b2)*((a0*a0)*(b3*b3))))) + 
         ((((a3*b0)*((a1*a1)*(b2*b2)) + 
            (a3*b2)*((a2*a2)*(b0*b0))) + 
          ((-a0*b1)*((a1*a1)*(b3*b3)) + 
           (-a0*b3)*((a2*a2)*(b1*b1)))) + 
         (((-a2*b1)*((a3*a3)*(b0*b0)) + 
           (-a2*b3)*((a0*a0)*(b2*b2))) + 
        ((-3*a0*b3)*((a3*a3)*(b0*b0)) + 
         (-2*a1*b2)*((a3*a3)*(b0*b0)))))) + 
      (((((2*a2*b1)*((a0*a0)*(b3*b3)) + 
          (3*a3*b0)*((a0*a0)*(b3*b3))) + 
           ((a0*a2)*((a3*b2)*(b1*b1)) + 
            (a1*b0)*((b1*b3)*(a2*a2)))) + 
         (((-a0*a1)*((a3*b1)*(b2*b2)) + 
           (-a2*b0)*((b2*b3)*(a1*a1))) + 
        ((-3*a0*a1)*((a2*b0)*(b3*b3)) + 
         (-3*a3*b1)*((b2*b3)*(a0*a0))))) + 
      ((((-2*a0*a2)*((a3*b0)*(b2*b2)) + 
         (-2*a3*b0)*((b1*b3)*(a1*a1))) + 
         ((2*a0*a1)*((a3*b3)*(b1*b1)) + 
          (2*a0*b0)*((b2*b3)*(a2*a2)))) + 
        (((3*a0*b0)*((b1*b2)*(a3*a3)) + 
          (3*a1*a2)*((a3*b3)*(b0*b0))) + 
           ((a3*a3)*((a3*b0)*(b0*b0)) + 
           (-a0*a0)*((a0*b3)*(b3*b3))))))) + 
           ((a3*a0)*((a0*b2)*(b2*b2)) + 
           (-a0*a3)*((a3*b1)*(b1*b1)));
    
    return { vₓₓₓ, vₓₓᵧ, vₓᵧᵧ, vᵧᵧᵧ, vₓₓ, vₓᵧ, vᵧᵧ, vₓ, vᵧ, v }
}


export { 
    getImplicitForm3, 
    getImplicitForm3ErrorBound, 
    getImplicitForm3Parametric,
    getImplicitForm3ParametricAbs
}
