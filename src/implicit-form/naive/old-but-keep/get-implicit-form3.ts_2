
import { getX } from '../../to-power-basis/get-x';
import { getY } from '../../to-power-basis/get-y';
import { 
    γ2, γ3, γ4, γ5, γ6, γ7, γ8, γ9, 
    γ10, γ11, γ12, γ1
} from '../../error-analysis/error-analysis';


/**
 * Returns an approximate implicit form of the given cubic bezier.
 * @param ps 
 */
function getImplicitForm3(ps: number[][]) {
    return getImplicitForm3Parametric(
        getX(ps), 
        getY(ps)
    );
}


/**
 * Returns an approximate implicit form coefficientwise error bound of the given 
 * cubic bezier.
 * @param ps 
 */
function getImplicitForm3ErrorBound(ps: number[][]) {
    let coeffsX = getX(ps);
    let coeffsY = getY(ps);
    let { vₓₓₓ, vₓₓᵧ, vₓᵧᵧ, vᵧᵧᵧ, vₓₓ, vₓᵧ, vᵧᵧ, vₓ, vᵧ, v } =
        getImplicitForm3ParametricAbs(
            coeffsX, 
            coeffsY
        );

    // the γs below are standard model error bounds
    return {
        vₓₓₓ: γ2  * vₓₓₓ,
        vₓₓᵧ: γ2  * vₓₓᵧ,
        vₓᵧᵧ: γ2  * vₓᵧᵧ,
        vᵧᵧᵧ: γ2  * vᵧᵧᵧ,
        //vₓₓ : γ7  * vₓₓ, 
        vₓₓ : γ1  * vₓₓ, 
        vₓᵧ : γ8  * vₓᵧ, 
        vᵧᵧ : γ7  * vᵧᵧ, 
        vₓ  : γ10 * vₓ , 
        vᵧ  : γ10 * vᵧ , 
        v   : γ12 * v  , 
    }
}


const abs = Math.abs;


function getImplicitForm3Parametric(
        coeffsX: number[],
        coeffsY: number[]) {

    // The implicit form is given by:
    // vₓₓₓx³ + vₓₓᵧx²y + vₓᵧᵧxy² + vᵧᵧᵧy³ + vₓₓx² +vₓᵧxy + vᵧᵧy² + vₓx + vᵧy + v = 0

    let [a3, a2, a1, a0] = coeffsX;
    let [b3, b2, b1, b0] = coeffsY;

    let a3b1 = a3*b1;  // γ1
    let a1b3 = a1*b3;  // γ1
    let a3b2 = a3*b2;  // γ1
    let a2b3 = a2*b3;  // γ1
    let a3a3 = a3*a3;  // γ1
    let b3b3 = b3*b3;  // γ1

    let q1 = a3*b0 - a0*b3  // γ2
    let tq2 = 2*(a3b1 - a1b3)   // γ2
    let q3 = a3b2  - a2b3   // γ2
    let q4 = a2*b0 - a0*b2  // γ2
    let q5 = a2*b1 - a1*b2  // γ2
    let q6 = a1*b0 - a0*b1  // γ2

    let q1q1 = q1*q1;    // γ5 = γ2+γ2 + γ1
    let q1q5 = q1*q5;    // γ5 = γ2+γ2 + γ1
    let tq2q4 = tq2*q4;  // γ5 = γ2+γ2 + γ1
    let q3q4 = q3*q4;    // γ5 = γ2+γ2 + γ1

    let u1 = -3*q1 - q5;  // γ4 = γ2+γ1 + γ1

    let p1 = a2b3 + a3b2;  // γ2
    let p2 = a1b3 + a3b1;  // γ2

    let vₓₓₓ =     -b3*b3b3;  // γ2
    let vₓₓᵧ =  (3*a3)*b3b3;  // γ2
    let vₓᵧᵧ = (-3*b3)*a3a3;  // γ2
    let vᵧᵧᵧ =      a3*a3a3;  // γ2

    let vₓₓ = (u1*b3b3 + q3*(b1*b3 - b2*b2)) + tq2*b2*b3;  // γ6 = γ5 + γ1
    //let vₓₓ = u1;
               
    let vᵧᵧ = (u1*(a3a3) + q3*(a1*a3 - a2*a2)) + tq2*(a2*a3);  // γ6 = γ5 + γ1
    let vₓᵧ = q3*(2*a2*b2 - p2) - (2*u1*(a3*b3) + tq2*p1);     // γ8

    let s1 = (-3*q1q1 - 2*q1q5) + (tq2q4 + q3*q6);  // γ8
    let s2 = q1*tq2 - 2*q3q4;  // γ6
    let s3 = q1*q3 - 0.25*tq2*tq2 + q3*q5; // γ7

    let vₓ = s1*b3 + (s2*b2 + s3*b1);  // γ10
    let vᵧ = -s1*a3 - (s2*a2 + s3*a1); // γ10

    let v = q1*(tq2q4 - q1q1 - q1q5) + s3*q6 - q3q4*q4; // γ12

    return { vₓₓₓ, vₓₓᵧ, vₓᵧᵧ, vᵧᵧᵧ, vₓₓ, vₓᵧ, vᵧᵧ, vₓ, vᵧ, v }
}


function getImplicitForm3ParametricAbs(
        coeffsX: number[],
        coeffsY: number[]) {

    // The implicit form is given by:
    // vₓₓₓx³ + vₓₓᵧx²y + vₓᵧᵧxy² + vᵧᵧᵧy³ + vₓₓx² +vₓᵧxy + vᵧᵧy² + vₓx + vᵧy + v = 0

    let [a3, a2, a1, a0] = coeffsX;
    let [b3, b2, b1, b0] = coeffsY;

    let a3b1 = a3*b1;
    let a1b3 = a1*b3;
    let a3b2 = a3*b2;
    let a2b3 = a2*b3;
    let a3a3 = a3*a3;
    let b2b2 = b2*b2;
    let b3b3 = b3*b3;
    let a1a3 = a1*a3;
    let a2a2 = a2*a2;
    let b1b3 = b1*b3;
    let b2b3 = b2*b3;
    let a2a3 = a2*a3;
    let a3b3 = a3*b3;
    let a3b0 = a3*b0;
    let a0b3 = a0*b3;
    let a2b0 = a2*b0;
    let a0b2 = a0*b2;
    let a2b1 = a2*b1;
    let a1b2 = a1*b2;
    let a1b0 = a1*b0;
    let a0b1 = a0*b1;

    let a3b1_ = abs(a3b1);
    let a1b3_ = abs(a1b3);
    let a3b2_ = abs(a3b2);
    let a2b3_ = abs(a2b3);
    let a3a3_ = abs(a3a3);
    let b2b2_ = abs(b2b2);
    let b3b3_ = abs(b3b3);
    let a1a3_ = abs(a1a3);
    let a2a2_ = abs(a2a2);
    let b1b3_ = abs(b1b3);
    let b2b3_ = abs(b2b3);
    let a2a3_ = abs(a2a3);
    let a3b3_ = abs(a3b3);
    let a3b0_ = abs(a3b0);
    let a0b3_ = abs(a0b3);
    let a2b0_ = abs(a2b0);
    let a0b2_ = abs(a0b2);
    let a2b1_ = abs(a2b1);
    let a1b2_ = abs(a1b2);
    let a1b0_ = abs(a1b0);
    let a0b1_ = abs(a0b1);

    let q1 = a3b0 - a0b3;
    let q1_ = abs(q1) + a3b0_ + a0b3_;

    let tq2 = 2*(a3b1 - a1b3);
    let tq2_ = 2*(abs(a3b1 - a1b3) + a3b1_ + a1b3_);
    let q3 = a3b2 - a2b3; 
    let q3_ = abs(a3b2 - a2b3) + a3b2_ + a2b3_;

    let q4 = a2b0 - a0b2;
    let q4_ = abs(a2b0 - a0b2) + a2b0_ + a0b2_;
    let q5 = a2b1 - a1b2;
    let q5_ = abs(a2b1 - a1b2) + a2b1_ + a1b2_;
    let q6 = a1b0 - a0b1;
    let q6_ = abs(a1b0 - a0b1) + a1b0_ + a0b1_;

    let q1q1 = q1*q1;    // γ5 = γ2+γ2 + γ1
    let q1q5 = q1*q5;    // γ5 = γ2+γ2 + γ1
    let tq2q4 = tq2*q4;  // γ5 = γ2+γ2 + γ1
    let q3q4 = q3*q4;    // γ5 = γ2+γ2 + γ1

    let u1 = -3*q1 - q5;  // γ4 = γ2+γ1 + γ1

    let p1 = a2b3 + a3b2;  // γ2
    let p2 = a1b3 + a3b1;  // γ2

    let vₓₓₓ = abs(-b3*b3b3);  // γ2
    let vₓₓᵧ =  (3*a3)*b3b3;  // γ2
    let vₓᵧᵧ = (-3*b3)*a3a3;  // γ2
    let vᵧᵧᵧ =      a3*a3a3;  // γ2

    let t1 = b1b3 - b2b2;
    let t1_ = abs(b1b3 - b2b2) + abs(b1b3) + abs(b2b2);
    let t2 = a1a3 - a2a2;
    let t2_ = abs(a1a3 - a2a2) + abs(a1a3) + abs(a2a2);

    //let vₓₓ = (u1*b3b3 + q3*t1) + tq2*b2b3;  // γ6 = γ5 + γ1
    //let vₓₓ = 
    //    ((-3*(a3b0 - a0b3) - (a2b1 - a1b2))*b3b3 + (a3b2 - a2b3)*(b1b3 - b2b2)) + 
    //    (2*(a3b1 - a1b3))*b2b3;  // γ6 = γ5 + γ1
    let u1_ = abs(3*q1) + 3*q1_ + q5_ + abs(-3*q1 - q5);
    let vₓₓ = 
        2*(u1_*abs(b3b3)) + abs(u1*b3b3) +
        2*(q3_*t1_) + abs(q3*t1) +
        abs(u1*b3b3 + q3*t1) +
        2*(tq2_*abs(b2b3)) + abs(tq2*b2b3) + 
        abs((u1*b3b3 + q3*t1) + tq2*b2b3);

    let vᵧᵧ = (u1*(a3a3) + q3*t2) + tq2*(a2a3);  // γ6 = γ5 + γ1
    let vₓᵧ = q3*(2*a2*b2 - p2) - (2*u1*(a3b3) + tq2*p1);     // γ8

    let s1 = (-3*q1q1 - 2*q1q5) + (tq2q4 + q3*q6);  // γ8
    let s2 = q1*tq2 - 2*q3q4;  // γ6
    let s3 = q1*q3 - 0.25*tq2*tq2 + q3*q5; // γ7

    let vₓ = s1*b3 + (s2*b2 + s3*b1);  // γ10
    let vᵧ = -s1*a3 - (s2*a2 + s3*a1); // γ10

    let v = q1*(tq2q4 - q1q1 - q1q5) + s3*q6 - q3q4*q4; // γ12

    return { vₓₓₓ, vₓₓᵧ, vₓᵧᵧ, vᵧᵧᵧ, vₓₓ, vₓᵧ, vᵧᵧ, vₓ, vᵧ, v }
}


function getImplicitForm3ParametricAbs_(
        coeffsX: number[],
        coeffsY: number[]) {

    // The implicit form is given by:
    // vₓₓₓx³ + vₓₓᵧx²y + vₓᵧᵧxy² + vᵧᵧᵧy³ + vₓₓx² +vₓᵧxy + vᵧᵧy² + vₓx + vᵧy + v = 0

    let [a3, a2, a1, a0] = coeffsX.map(Math.abs);
    let [b3, b2, b1, b0] = coeffsY.map(Math.abs);

    let a3b1 = a3*b1;  // γ1
    let a1b3 = a1*b3;  // γ1
    let a3b2 = a3*b2;  // γ1
    let a2b3 = a2*b3;  // γ1
    let a3a3 = a3*a3;  // γ1
    let b3b3 = b3*b3;  // γ1

    let q1 = a3*b0 + a0*b3  // γ2
    let tq2 = 2*(a3b1 + a1b3)   // γ2
    let q3 = a3b2  + a2b3   // γ2
    let q4 = a2*b0 + a0*b2  // γ2
    let q5 = a2*b1 + a1*b2  // γ2
    let q6 = a1*b0 + a0*b1  // γ2

    let q1q1 = q1*q1;    // γ5 = γ2+γ2 + γ1
    let q1q5 = q1*q5;    // γ5 = γ2+γ2 + γ1
    let tq2q4 = tq2*q4;  // γ5 = γ2+γ2 + γ1
    let q3q4 = q3*q4;    // γ5 = γ2+γ2 + γ1

    let u1 = 3*q1 + q5;  // γ4 = γ2+γ1 + γ1

    let p1 = a2b3 + a3b2;  // γ2
    let p2 = a1b3 + a3b1;  // γ2

    let vₓₓₓ =     +b3*b3b3;  // γ2
    let vₓₓᵧ =  (3*a3)*b3b3;  // γ2
    let vₓᵧᵧ = (+3*b3)*a3a3;  // γ2
    let vᵧᵧᵧ =      a3*a3a3;  // γ2

    let vₓₓ = (u1*(b3b3) + q3*(b1*b3 + b2*b2)) + tq2*(b2*b3);  // γ6 = γ5 + γ1
    let vᵧᵧ = (u1*(a3a3) + q3*(a1*a3 + a2*a2)) + tq2*(a2*a3);  // γ6 = γ5 + γ1
    let vₓᵧ = q3*(2*a2*b2 + p2) + (2*u1*(a3*b3) + tq2*p1);     // γ8

    let s1 = (+3*q1q1 + 2*q1q5) + (tq2q4 + q3*q6);  // γ8
    let s2 = q1*tq2 + 2*q3q4;  // γ6
    let s3 = q1*q3 + 0.25*tq2*tq2 + q3*q5; // γ7

    let vₓ = s1*b3 + (s2*b2 + s3*b1);  // γ10
    let vᵧ = +s1*a3 + (s2*a2 + s3*a1); // γ10

    let v = q1*(tq2q4 + q1q1 + q1q5) + s3*q6 + q3q4*q4; // γ12

    return { vₓₓₓ, vₓₓᵧ, vₓᵧᵧ, vᵧᵧᵧ, vₓₓ, vₓᵧ, vᵧᵧ, vₓ, vᵧ, v }
}


export { 
    getImplicitForm3, 
    getImplicitForm3ErrorBound, 
    getImplicitForm3Parametric,
    getImplicitForm3ParametricAbs
}
