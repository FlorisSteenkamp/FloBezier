
import { drawElemFunctions, IDrawElemFunctions } from './draw-elem/draw-elem';
import { FatLine } from './fat-line';


type DebugElemType =
    | 'beziers'  
    | 'intersection'  
    | 'looseBoundingBox' 
    | 'tightBoundingBox' 
    | 'extreme' 
    | 'boundingHull' 
    | 'fatLine'


type GeneratedElemTypes = {
    [T in DebugElemType]: any;
}


interface GeneratedElems extends GeneratedElemTypes {
    beziers          : number[][][][],
    intersection     : number[][],
    looseBoundingBox : number[][][],
    tightBoundingBox : number[][][],
    extreme          : {p: number[], t: number}[],
    boundingHull     : number[][][],
    fatLine          : FatLine[],
}


interface IGenerated {
    elems: GeneratedElems;
}


interface IDebugFunctions {
    drawElem : IDrawElemFunctions,
}


class BezDebug {
    generated  : IGenerated;
    fs         : IDebugFunctions;


    /**
     * @param config - configuration settings.
     * @param fs - some useful functions.  
     * @private
     */
    constructor(
            public g: SVGGElement) {

        //(this as any).Bezier3 = Bezier3; // Included only for quick debugging from console
        //(this as any).Vector2d = Vector; // ...

        //-----------------------------------------------
        // Generated by debug object for later inspection
        //-----------------------------------------------
        this.generated = {
            elems: {
                beziers          : [],
                fatLine          : [],              
                looseBoundingBox : [],
                tightBoundingBox : [],
                extreme          : [],
                boundingHull     : [],
                intersection     : [],
            }
        }
        
        
        this.fs = { 
            drawElem: drawElemFunctions,
        };
    }
}


export { 
    DebugElemType, 
    GeneratedElemTypes, 
    GeneratedElems, 
    IGenerated,
    IDebugFunctions,
    BezDebug
}