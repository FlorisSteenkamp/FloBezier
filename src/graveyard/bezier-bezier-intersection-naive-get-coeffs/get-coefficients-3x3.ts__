
import { getX } from "../../../to-power-basis/get-x";
import { getY } from "../../../to-power-basis/get-y";
import { 
    getImplicitForm3Parametric, getImplicitForm3ParametricAbs 
} from "../../../implicit-form/naive/get-implicit-form3";
import { 
    γ2, γ3, γ4, γ5, γ6, γ7, γ8, γ9,
    γ10, γ11, γ12, γ13, γ14
} from '../../../error-analysis/error-analysis';


let abs = Math.abs;


/**
 * Returns an approximate implicit form of the given cubic bezier.
 * @param ps 
 */
function getCoeffs3x3(
        ps1: number[][], 
        ps2: number[][]) {

    let coeffsX1 = getX(ps1);
    let coeffsY1 = getY(ps1);
    let coeffsX2 = getX(ps2);
    let coeffsY2 = getY(ps2);

    return getCoeffs3x3Parametric(
        coeffsX1,
        coeffsY1,
        coeffsX2,
        coeffsY2
    );
}


function getCoeffs3x3ErrorBound(
        coeffsX1: number[],
        coeffsY1: number[],
        coeffsX2: number[],
        coeffsY2: number[]) {

    let [v9, v8, v7, v6, v5, v4, v3, v2, v1, v0] =
        getCeoffs3x3ParametricAbs(
            coeffsX1, 
            coeffsY1,
            coeffsX2, 
            coeffsY2
        );

    return [
        γ5  * v9,
        γ6  * v8,
        γ7  * v7,
        γ10 * v6,
        γ10 * v5,
        γ11 * v4,
        γ13 * v3,
        γ13 * v2,
        γ13 * v1,
        γ14 * v0,
    ]
}


function getCeoffs3x3ParametricAbs(
        coeffsX1: number[],
        coeffsY1: number[],
        coeffsX2: number[],
        coeffsY2: number[]) {

    let { vₓₓₓ, vₓₓᵧ, vₓᵧᵧ, vᵧᵧᵧ, vₓₓ, vₓᵧ, vᵧᵧ, vₓ, vᵧ, v } = 
        getImplicitForm3ParametricAbs(
            coeffsX1, 
            coeffsY1
        );

    let [c3, c2, c1, c0] = coeffsX2; // Assume exact -> max bitlength = 49
    let [d3, d2, d1, d0] = coeffsY2; // Assume exact -> max bitlength = 49

    let v9 =
        c3*d3*d3*vₓᵧᵧ + 
        d3*c3*c3*vₓₓᵧ + 
        c3*c3*c3*vₓₓₓ + 
        d3*d3*d3*vᵧᵧᵧ;  

    let v8 =
        2*c2*c3*d3*vₓₓᵧ + 
        2*c3*d2*d3*vₓᵧᵧ + 
          c2*d3*d3*vₓᵧᵧ + 
          d2*c3*c3*vₓₓᵧ + 
        3*c2*c3*c3*vₓₓₓ + 
        3*d2*d3*d3*vᵧᵧᵧ;  

    let v7 =
        2*c1*c3*d3*vₓₓᵧ + 
        2*c2*c3*d2*vₓₓᵧ + 
        2*c2*d2*d3*vₓᵧᵧ + 
        2*c3*d1*d3*vₓᵧᵧ + 
          c1*d3*d3*vₓᵧᵧ + 
          c3*d2*d2*vₓᵧᵧ + 
          d1*c3*c3*vₓₓᵧ + 
          d3*c2*c2*vₓₓᵧ + 
        3*c1*c3*c3*vₓₓₓ + 
        3*c3*c2*c2*vₓₓₓ + 
        3*d1*d3*d3*vᵧᵧᵧ + 
        3*d3*d2*d2*vᵧᵧᵧ;  

    let v6 =
        2*c0*c3*d3*vₓₓᵧ + 
        2*c1*c2*d3*vₓₓᵧ + 
        2*c1*c3*d2*vₓₓᵧ + 
        2*c1*d2*d3*vₓᵧᵧ + 
        2*c2*c3*d1*vₓₓᵧ + 
        2*c2*d1*d3*vₓᵧᵧ + 
        2*c3*d0*d3*vₓᵧᵧ + 
        2*c3*d1*d2*vₓᵧᵧ + 
          c0*d3*d3*vₓᵧᵧ + 
          d0*c3*c3*vₓₓᵧ + 
          c2*d2*d2*vₓᵧᵧ + 
          d2*c2*c2*vₓₓᵧ + 
        6*c1*c2*c3*vₓₓₓ + 
        6*d1*d2*d3*vᵧᵧᵧ + 
        3*c0*c3*c3*vₓₓₓ + 
        3*d0*d3*d3*vᵧᵧᵧ + 
          c2*c2*c2*vₓₓₓ + 
          d2*d2*d2*vᵧᵧᵧ + 
          c3*c3   *vₓₓ  + 
          d3*d3   *vᵧᵧ  + 
          c3*d3   *vₓᵧ;

    let v5 =
          c2*d3   *vₓᵧ  + 
          c3*d2   *vₓᵧ  + 
        2*c2*c3   *vₓₓ  + 
        2*d2*d3   *vᵧᵧ  + 
        2*c0*c2*d3*vₓₓᵧ + 
        2*c0*c3*d2*vₓₓᵧ + 
        2*c0*d2*d3*vₓᵧᵧ + 
        2*c1*c2*d2*vₓₓᵧ + 
        2*c1*c3*d1*vₓₓᵧ + 
        2*c1*d1*d3*vₓᵧᵧ + 
        2*c2*c3*d0*vₓₓᵧ + 
        2*c2*d0*d3*vₓᵧᵧ + 
        2*c2*d1*d2*vₓᵧᵧ + 
        2*c3*d0*d2*vₓᵧᵧ + 
          c1*d2*d2*vₓᵧᵧ + 
          c3*d1*d1*vₓᵧᵧ + 
          d1*c2*c2*vₓₓᵧ + 
          d3*c1*c1*vₓₓᵧ + 
        6*c0*c2*c3*vₓₓₓ + 
        6*d0*d2*d3*vᵧᵧᵧ + 
        3*c3*c1*c1*vₓₓₓ + 
        3*d3*d1*d1*vᵧᵧᵧ + 
        3*c1*c2*c2*vₓₓₓ + 
        3*d1*d2*d2*vᵧᵧᵧ;  

    let v4 =
        2*c0*c1*d3*vₓₓᵧ + 
        2*c0*c2*d2*vₓₓᵧ + 
        2*c0*c3*d1*vₓₓᵧ + 
        2*c0*d1*d3*vₓᵧᵧ + 
        2*c1*c2*d1*vₓₓᵧ + 
        2*c1*c3*d0*vₓₓᵧ + 
        2*c1*d0*d3*vₓᵧᵧ + 
        2*c1*d1*d2*vₓᵧᵧ + 
        2*c2*d0*d2*vₓᵧᵧ + 
        2*c3*d0*d1*vₓᵧᵧ + 
          c0*d2*d2*vₓᵧᵧ + 
          c2*d1*d1*vₓᵧᵧ + 
          d0*c2*c2*vₓₓᵧ + 
          d2*c1*c1*vₓₓᵧ + 
        6*c0*c1*c3*vₓₓₓ + 
        6*d0*d1*d3*vᵧᵧᵧ + 
        3*c0*c2*c2*vₓₓₓ + 
        3*c2*c1*c1*vₓₓₓ + 
        3*d0*d2*d2*vᵧᵧᵧ + 
        3*d2*d1*d1*vᵧᵧᵧ + 
          c1*d3   *vₓᵧ  + 
          c2*d2   *vₓᵧ  + 
          c3*d1   *vₓᵧ  + 
        2*c1*c3   *vₓₓ  + 
        2*d1*d3   *vᵧᵧ  + 
          c2*c2   *vₓₓ  + 
          d2*d2   *vᵧᵧ ;  

    let v3 =
        2*c0*c1*d2*vₓₓᵧ + 
        2*c0*c2*d1*vₓₓᵧ + 
        2*c0*c3*d0*vₓₓᵧ + 
        2*c0*d0*d3*vₓᵧᵧ + 
        2*c0*d1*d2*vₓᵧᵧ + 
        2*c1*c2*d0*vₓₓᵧ + 
        2*c1*d0*d2*vₓᵧᵧ + 
        2*c2*d0*d1*vₓᵧᵧ + 
          c1*d1*d1*vₓᵧᵧ + 
          c3*d0*d0*vₓᵧᵧ + 
          d1*c1*c1*vₓₓᵧ + 
          d3*c0*c0*vₓₓᵧ + 
        6*c0*c1*c2*vₓₓₓ + 
        6*d0*d1*d2*vᵧᵧᵧ + 
        3*c3*c0*c0*vₓₓₓ + 
        3*d3*d0*d0*vᵧᵧᵧ + 
          c1*c1*c1*vₓₓₓ + 
          d1*d1*d1*vᵧᵧᵧ + 
          c0*d3   *vₓᵧ  + 
          c1*d2   *vₓᵧ  + 
          c2*d1   *vₓᵧ  + 
          c3*d0   *vₓᵧ  + 
        2*c0*c3   *vₓₓ  + 
        2*c1*c2   *vₓₓ  + 
        2*d0*d3   *vᵧᵧ  + 
        2*d1*d2   *vᵧᵧ  + 
          c3      *vₓ   + 
          d3      *vᵧ  ;  

    let v2 =
        2*c0*c1*d1*vₓₓᵧ + 
        2*c0*c2*d0*vₓₓᵧ + 
        2*c0*d0*d2*vₓᵧᵧ + 
        2*c1*d0*d1*vₓᵧᵧ + 
          c0*d1*d1*vₓᵧᵧ + 
          c2*d0*d0*vₓᵧᵧ + 
          d0*c1*c1*vₓₓᵧ + 
          d2*c0*c0*vₓₓᵧ + 
        3*c0*c1*c1*vₓₓₓ + 
        3*c2*c0*c0*vₓₓₓ + 
        3*d0*d1*d1*vᵧᵧᵧ + 
        3*d2*d0*d0*vᵧᵧᵧ + 
          c0*d2   *vₓᵧ  + 
          c1*d1   *vₓᵧ  + 
          c2*d0   *vₓᵧ  + 
        2*c0*c2   *vₓₓ  + 
        2*d0*d2   *vᵧᵧ  + 
          c1*c1   *vₓₓ  + 
          d1*d1   *vᵧᵧ  + 
          c2      *vₓ   + 
          d2      *vᵧ  ;  

    let v1 =
        2*c0*c1*d0*vₓₓᵧ + 
        2*c0*d0*d1*vₓᵧᵧ + 
          c1*d0*d0*vₓᵧᵧ + 
          d1*c0*c0*vₓₓᵧ + 
        3*c1*c0*c0*vₓₓₓ + 
        3*d1*d0*d0*vᵧᵧᵧ + 
          c0*d1   *vₓᵧ  + 
          c1*d0   *vₓᵧ  + 
        2*c0*c1   *vₓₓ  + 
        2*d0*d1   *vᵧᵧ  + 
          c1      *vₓ   + 
          d1      *vᵧ  ;  

    let v0 =
        c0*d0*d0*vₓᵧᵧ +
        d0*c0*c0*vₓₓᵧ +
        c0*c0*c0*vₓₓₓ +
        d0*d0*d0*vᵧᵧᵧ +
        c0*d0   *vₓᵧ  +
        c0*c0   *vₓₓ  +
        d0*d0   *vᵧᵧ  +
        c0      *vₓ   +
        d0      *vᵧ   +
        v;             

    return [v9, v8, v7, v6, v5, v4, v3, v2, v1, v0];
}



/**
 * @param ps1 
 * @param ps2 
 */
function getCoeffs3x3Parametric(
        coeffsX1: number[],
        coeffsY1: number[],
        coeffsX2: number[],
        coeffsY2: number[]) {

    let { vₓₓₓ, vₓₓᵧ, vₓᵧᵧ, vᵧᵧᵧ, vₓₓ, vₓᵧ, vᵧᵧ, vₓ, vᵧ, v } = 
        getImplicitForm3Parametric(coeffsX1, coeffsY1);

    let [c3, c2, c1, c0] = coeffsX2; // Assume exact -> max bitlength = 49
    let [d3, d2, d1, d0] = coeffsY2; // Assume exact -> max bitlength = 49

    let v9 =
        abs(c3*d3*d3*vₓᵧᵧ) + 
        abs(d3*c3*c3*vₓₓᵧ) + 
        abs(c3*c3*c3*vₓₓₓ) + 
        abs(d3*d3*d3*vᵧᵧᵧ);  

    let v8 =
        abs(2*c2*c3*d3*vₓₓᵧ) + 
        abs(2*c3*d2*d3*vₓᵧᵧ) + 
        abs(  c2*d3*d3*vₓᵧᵧ) + 
        abs(  d2*c3*c3*vₓₓᵧ) + 
        abs(3*c2*c3*c3*vₓₓₓ) + 
        abs(3*d2*d3*d3*vᵧᵧᵧ);  

    let v7 =
        abs(2*c1*c3*d3*vₓₓᵧ) + 
        abs(2*c2*c3*d2*vₓₓᵧ) + 
        abs(2*c2*d2*d3*vₓᵧᵧ) + 
        abs(2*c3*d1*d3*vₓᵧᵧ) + 
        abs(  c1*d3*d3*vₓᵧᵧ) + 
        abs(  c3*d2*d2*vₓᵧᵧ) + 
        abs(  d1*c3*c3*vₓₓᵧ) + 
        abs(  d3*c2*c2*vₓₓᵧ) + 
        abs(3*c1*c3*c3*vₓₓₓ) + 
        abs(3*c3*c2*c2*vₓₓₓ) + 
        abs(3*d1*d3*d3*vᵧᵧᵧ) + 
        abs(3*d3*d2*d2*vᵧᵧᵧ);  

    let v6 =
        abs(2*c0*c3*d3*vₓₓᵧ) + 
        abs(2*c1*c2*d3*vₓₓᵧ) + 
        abs(2*c1*c3*d2*vₓₓᵧ) + 
        abs(2*c1*d2*d3*vₓᵧᵧ) + 
        abs(2*c2*c3*d1*vₓₓᵧ) + 
        abs(2*c2*d1*d3*vₓᵧᵧ) + 
        abs(2*c3*d0*d3*vₓᵧᵧ) + 
        abs(2*c3*d1*d2*vₓᵧᵧ) + 
        abs(  c0*d3*d3*vₓᵧᵧ) + 
        abs(  d0*c3*c3*vₓₓᵧ) + 
        abs(  c2*d2*d2*vₓᵧᵧ) + 
        abs(  d2*c2*c2*vₓₓᵧ) + 
        abs(6*c1*c2*c3*vₓₓₓ) + 
        abs(6*d1*d2*d3*vᵧᵧᵧ) + 
        abs(3*c0*c3*c3*vₓₓₓ) + 
        abs(3*d0*d3*d3*vᵧᵧᵧ) + 
        abs(  c2*c2*c2*vₓₓₓ) + 
        abs(  d2*d2*d2*vᵧᵧᵧ) + 
        abs(  c3*c3   *vₓₓ ) + 
        abs(  d3*d3   *vᵧᵧ ) + 
        abs(  c3*d3   *vₓᵧ);   

    let v5 =
        abs(  c2*d3   *vₓᵧ ) + 
        abs(  c3*d2   *vₓᵧ ) + 
        abs(2*c2*c3   *vₓₓ ) + 
        abs(2*d2*d3   *vᵧᵧ ) + 
        abs(2*c0*c2*d3*vₓₓᵧ) + 
        abs(2*c0*c3*d2*vₓₓᵧ) + 
        abs(2*c0*d2*d3*vₓᵧᵧ) + 
        abs(2*c1*c2*d2*vₓₓᵧ) + 
        abs(2*c1*c3*d1*vₓₓᵧ) + 
        abs(2*c1*d1*d3*vₓᵧᵧ) + 
        abs(2*c2*c3*d0*vₓₓᵧ) + 
        abs(2*c2*d0*d3*vₓᵧᵧ) + 
        abs(2*c2*d1*d2*vₓᵧᵧ) + 
        abs(2*c3*d0*d2*vₓᵧᵧ) + 
        abs(  c1*d2*d2*vₓᵧᵧ) + 
        abs(  c3*d1*d1*vₓᵧᵧ) + 
        abs(  d1*c2*c2*vₓₓᵧ) + 
        abs(  d3*c1*c1*vₓₓᵧ) + 
        abs(6*c0*c2*c3*vₓₓₓ) + 
        abs(6*d0*d2*d3*vᵧᵧᵧ) + 
        abs(3*c3*c1*c1*vₓₓₓ) + 
        abs(3*d3*d1*d1*vᵧᵧᵧ) + 
        abs(3*c1*c2*c2*vₓₓₓ) + 
        abs(3*d1*d2*d2*vᵧᵧᵧ);  

    let v4 =
        abs(2*c0*c1*d3*vₓₓᵧ) + 
        abs(2*c0*c2*d2*vₓₓᵧ) + 
        abs(2*c0*c3*d1*vₓₓᵧ) + 
        abs(2*c0*d1*d3*vₓᵧᵧ) + 
        abs(2*c1*c2*d1*vₓₓᵧ) + 
        abs(2*c1*c3*d0*vₓₓᵧ) + 
        abs(2*c1*d0*d3*vₓᵧᵧ) + 
        abs(2*c1*d1*d2*vₓᵧᵧ) + 
        abs(2*c2*d0*d2*vₓᵧᵧ) + 
        abs(2*c3*d0*d1*vₓᵧᵧ) + 
        abs(  c0*d2*d2*vₓᵧᵧ) + 
        abs(  c2*d1*d1*vₓᵧᵧ) + 
        abs(  d0*c2*c2*vₓₓᵧ) + 
        abs(  d2*c1*c1*vₓₓᵧ) + 
        abs(6*c0*c1*c3*vₓₓₓ) + 
        abs(6*d0*d1*d3*vᵧᵧᵧ) + 
        abs(3*c0*c2*c2*vₓₓₓ) + 
        abs(3*c2*c1*c1*vₓₓₓ) + 
        abs(3*d0*d2*d2*vᵧᵧᵧ) + 
        abs(3*d2*d1*d1*vᵧᵧᵧ) + 
        abs(  c1*d3   *vₓᵧ ) + 
        abs(  c2*d2   *vₓᵧ ) + 
        abs(  c3*d1   *vₓᵧ ) + 
        abs(2*c1*c3   *vₓₓ ) + 
        abs(2*d1*d3   *vᵧᵧ ) + 
        abs(  c2*c2   *vₓₓ ) + 
        abs(  d2*d2   *vᵧᵧ );  

    let v3 =
        abs(2*c0*c1*d2*vₓₓᵧ) + 
        abs(2*c0*c2*d1*vₓₓᵧ) + 
        abs(2*c0*c3*d0*vₓₓᵧ) + 
        abs(2*c0*d0*d3*vₓᵧᵧ) + 
        abs(2*c0*d1*d2*vₓᵧᵧ) + 
        abs(2*c1*c2*d0*vₓₓᵧ) + 
        abs(2*c1*d0*d2*vₓᵧᵧ) + 
        abs(2*c2*d0*d1*vₓᵧᵧ) + 
        abs(  c1*d1*d1*vₓᵧᵧ) + 
        abs(  c3*d0*d0*vₓᵧᵧ) + 
        abs(  d1*c1*c1*vₓₓᵧ) + 
        abs(  d3*c0*c0*vₓₓᵧ) + 
        abs(6*c0*c1*c2*vₓₓₓ) + 
        abs(6*d0*d1*d2*vᵧᵧᵧ) + 
        abs(3*c3*c0*c0*vₓₓₓ) + 
        abs(3*d3*d0*d0*vᵧᵧᵧ) + 
        abs(  c1*c1*c1*vₓₓₓ) + 
        abs(  d1*d1*d1*vᵧᵧᵧ) + 
        abs(  c0*d3   *vₓᵧ ) + 
        abs(  c1*d2   *vₓᵧ ) + 
        abs(  c2*d1   *vₓᵧ ) + 
        abs(  c3*d0   *vₓᵧ ) + 
        abs(2*c0*c3   *vₓₓ ) + 
        abs(2*c1*c2   *vₓₓ ) + 
        abs(2*d0*d3   *vᵧᵧ ) + 
        abs(2*d1*d2   *vᵧᵧ ) + 
        abs(  c3      *vₓ  ) + 
        abs(  d3      *vᵧ  );  

    let v2 =
        abs(2*c0*c1*d1*vₓₓᵧ) + 
        abs(2*c0*c2*d0*vₓₓᵧ) + 
        abs(2*c0*d0*d2*vₓᵧᵧ) + 
        abs(2*c1*d0*d1*vₓᵧᵧ) + 
        abs(  c0*d1*d1*vₓᵧᵧ) + 
        abs(  c2*d0*d0*vₓᵧᵧ) + 
        abs(  d0*c1*c1*vₓₓᵧ) + 
        abs(  d2*c0*c0*vₓₓᵧ) + 
        abs(3*c0*c1*c1*vₓₓₓ) + 
        abs(3*c2*c0*c0*vₓₓₓ) + 
        abs(3*d0*d1*d1*vᵧᵧᵧ) + 
        abs(3*d2*d0*d0*vᵧᵧᵧ) + 
        abs(  c0*d2   *vₓᵧ ) + 
        abs(  c1*d1   *vₓᵧ ) + 
        abs(  c2*d0   *vₓᵧ ) + 
        abs(2*c0*c2   *vₓₓ ) + 
        abs(2*d0*d2   *vᵧᵧ ) + 
        abs(  c1*c1   *vₓₓ ) + 
        abs(  d1*d1   *vᵧᵧ ) + 
        abs(  c2      *vₓ  ) + 
        abs(  d2      *vᵧ  );  

    let v1 =
        abs(2*c0*c1*d0*vₓₓᵧ) + 
        abs(2*c0*d0*d1*vₓᵧᵧ) + 
        abs(  c1*d0*d0*vₓᵧᵧ) + 
        abs(  d1*c0*c0*vₓₓᵧ) + 
        abs(3*c1*c0*c0*vₓₓₓ) + 
        abs(3*d1*d0*d0*vᵧᵧᵧ) + 
        abs(  c0*d1   *vₓᵧ ) + 
        abs(  c1*d0   *vₓᵧ ) + 
        abs(2*c0*c1   *vₓₓ ) + 
        abs(2*d0*d1   *vᵧᵧ ) + 
        abs(  c1      *vₓ  ) + 
        abs(  d1      *vᵧ  );  

    let v0 =
        abs(c0*d0*d0*vₓᵧᵧ) + // γ6 = γ1 + γ2 + γ3
        abs(d0*c0*c0*vₓₓᵧ) + // γ6 = γ1 + γ2 + γ3
        abs(c0*c0*c0*vₓₓₓ) + // γ5 = γ1 + γ2 + γ2
        abs(d0*d0*d0*vᵧᵧᵧ) + // γ5 = γ1 + γ2 + γ2
        abs(c0*d0   *vₓᵧ ) + // γ13 = γ1 + γ1 + γ11
        abs(c0*c0   *vₓₓ ) + // γ12 = γ1 + γ1 + γ10
        abs(d0*d0   *vᵧᵧ ) + // γ12 = γ1 + γ1 + γ10
        abs(c0      *vₓ  ) + // γ26 = γ1 + γ25
        abs(d0      *vᵧ  ) + // γ26 = γ1 + γ25
        abs(v);              // γ11 = γ11


    return [v9, v8, v7, v6, v5, v4, v3, v2, v1, v0];
}


export { 
    getCoeffs3x3, getCoeffs3x3Parametric, getCeoffs3x3ParametricAbs,
    getCoeffs3x3ErrorBound
}
