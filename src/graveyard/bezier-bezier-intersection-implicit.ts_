
//declare var _bez_debug_: BezDebug; 

import { sign } from 'flo-numerical';
import { allRootsMultiWithErrBounds } from "flo-poly";
//import { BezDebug } from '../../debug/debug';
import { evaluate } from '../../local-properties-at-t/t-to-xy/evaluate';
import { areBoxesIntersecting } from '../../geometry.ts/are-boxes-intersecting';
import { getCoeffs1x1Quad } from './quad/get-coefficients-1x1';
import { getCoeffs2x1Quad } from './quad/get-coefficients-2x1';
import { getCoeffs3x1Quad } from './quad/get-coefficients-3x1';
import { getCoeffs1x2Quad } from './quad/get-coefficients-1x2';
import { getCoeffs2x2Quad } from './quad/get-coefficients-2x2';
import { getCoeffs3x2Quad } from './quad/get-coefficients-3x2';
import { getCoeffs1x3Quad } from './quad/get-coefficients-1x3';
import { getCoeffs2x3Quad } from './quad/get-coefficients-2x3';
import { getCoeffs3x3Quad } from './quad/get-coefficients-3x3';
import { getCoeffs1x1Exact_ } from './exact/get-coefficients-1x1-';
import { getCoeffs2x1Exact_ } from './exact/get-coefficients-2x1-';
import { getCoeffs3x1Exact_ } from './exact/get-coefficients-3x1-';
import { getCoeffs1x2Exact_ } from './exact/get-coefficients-1x2-';
import { getCoeffs2x2Exact_ } from './exact/get-coefficients-2x2-';
import { getCoeffs3x2Exact_ } from './exact/get-coefficients-3x2-';
import { getCoeffs1x3Exact_ } from './exact/get-coefficients-1x3-';
import { getCoeffs2x3Exact_ } from './exact/get-coefficients-2x3-';
import { getCoeffs3x3Exact_ } from './exact/get-coefficients-3x3-';
import { differentiateExact } from 'flo-poly/node/calculus/differentiate';
import { RootInterval } from 'flo-poly/node/roots/multi-with-err-bound/root-interval';


//const u = Number.EPSILON;
const abs = Math.abs;


/**
 * Returns the intersection between two linear, quadratic or cubic bezier curves
 * in any combination.
 * * Returns **undefined** only in the case that the two beziers are in the same
 * k-family.
 * * The second bezier's t values are retuned. Call getOtherTs to get the first
 * bezier's t values.
 * * this algorithm is nearly always accurate to 1 u in the t values for the **second**
 * bezier (except if there are several extremely close intersections) and
 * a few u accurate for the second t values.
 * * Before calling this function, ensure the two given beziers are really cubic
 * or quadratic if given as such (check with isReallyQuadratic), else convert
 * them (cubics can be converted with toQuadraticFromCubic)
 * See http://www.mare.ee/indrek/misc/2d.pdf
 * @param ps 
 */
let bezierBezierIntersectionImplicit = /*memoize2*/(
    (ps1: number[][], 
     ps2: number[][]) => {


    let ts2 = getIntersectionTs(ps1,ps2);
    if (ts2 === undefined) { return undefined; } // same k-family
    if (ts2.length === 0) { return []; } // no intersections
    let ts1 = getIntersectionTs(ps2, ps1);
    if (ts1.length === 0) { return []; }

    //let is1 = ts1.map(t => [evaluate(ps1, t.r[0]), evaluate(ps1, t.r[1])]);
    let is1 = ts1.map(t => evaluate(ps1, (t.r[0] + t.r[1]) / 2));
    let is2 = ts2.map(t => evaluate(ps2, (t.r[0] + t.r[1]) / 2));

    let del = 2**-20;

    let tPairs: RootInterval[][] = [];
    for (let i=0; i<ts1.length; i++) {
        let p1 = is1[i];
        // TODO - temp box size - fix
        let box1 = [[p1[0]-del, p1[1]-del], [p1[0]+del, p1[1]+del]]
        let found = false;
        for (let j=0; j<ts2.length; j++) {
            let p2 = is2[j];
            let box2 = [[p2[0]-del, p2[1]-del], [p2[0]+del, p2[1]+del]]
            if (areBoxesIntersecting(true)(box1, box2)) {
                if (found) { 
                    console.log('bomb'); 
                    continue; 
                }
                found = true;
                tPairs.push([ts1[i], ts2[j]]);
            }
        }
    }

    return tPairs;
});


/**
 * Returns a box guaranteed to engulf the real root
 * @param ps 
 * @param ri 
 */
function rootToBox(ps: number[][], ri: RootInterval) {
    {
        let t1 = 1;
        let t2 = 2;
        let x3 = 3; let x2 = 3; let x1 = 3; let x0 = 3;
        [
            t1**3*x3 + 3*t1**2*x2*(1 - t1) + 3*t1*x1*(1 - t1)**2 + x0*(1 - t1)**3, 
            t2*(t1**2*x3 + 2*t1*x2*(1 - t1) + x1*(1 - t1)**2) + (1 - t2)*(t1**3*x3 + 3*t1**2*x2*(1 - t1) + 3*t1*x1*(1 - t1)**2 + x0*(1 - t1)**3), 
            t2**2*(t1*x3 + x2*(1 - t1)) + t2*(1 - t2)*(2*t1**2*x3 + 4*t1*x2*(1 - t1) + 2*x1*(1 - t1)**2) + (1 - t2)**2*(t1**3*x3 + 3*t1**2*x2*(1 - t1) + 3*t1*x1*(1 - t1)**2 + x0*(1 - t1)**3), 
            t2**3*x3 + t2**2*(1 - t2)*(3*t1*x3 + 3*x2*(1 - t1)) + t2*(1 - t2)**2*(3*t1**2*x3 + 6*t1*x2*(1 - t1) + 3*x1*(1 - t1)**2) + (1 - t2)**3*(t1**3*x3 + 3*t1**2*x2*(1 - t1) + 3*t1*x1*(1 - t1)**2 + x0*(1 - t1)**3)
        ]
    }
}


function getIntersectionTs(
        ps1: number[][], 
        ps2: number[][]): RootInterval[] {

    let { coeffs, errBound } = [
        [getCoeffs1x1Quad, getCoeffs1x2Quad, getCoeffs1x3Quad],
        [getCoeffs2x1Quad, getCoeffs2x2Quad, getCoeffs2x3Quad],
        [getCoeffs3x1Quad, getCoeffs3x2Quad, getCoeffs3x3Quad]
    ][ps1.length-2][ps2.length-2](ps1, ps2);


    function getPExact() {
        return [
            [getCoeffs1x1Exact_, getCoeffs1x2Exact_, getCoeffs1x3Exact_],
            [getCoeffs2x1Exact_, getCoeffs2x2Exact_, getCoeffs2x3Exact_],
            [getCoeffs3x1Exact_, getCoeffs3x2Exact_, getCoeffs3x3Exact_]
        ][ps1.length-2][ps2.length-2](ps1, ps2);
    }

    function getPsExact() {
        let poly = getPExact();
        let psExact = [poly];
        while (poly.length > 1) {
            poly = differentiateExact(psExact[psExact.length-1]);
            psExact.push(poly);
        }

        return psExact;
    }

    // check if all coefficients are zero, 
    // i.e. the two curves are possibly in the same k-family
    let possiblySameKFamily = true;
    for (let i=0; i<coeffs.length; i++) {
        if (abs(coeffs[i][1]) - errBound[i] > 0) {
            possiblySameKFamily = false; break;
        }
    }
    let sameKFamily = false;
    if (possiblySameKFamily) {
        sameKFamily = true;
        let poly = getPExact();
        for (let i=0; i<poly.length; i++) {
            if (sign(poly[i]) !== 0) {
                sameKFamily = false; break;
            }
        }        
    }
    
    if (sameKFamily) {
        return undefined;
    }

    return allRootsMultiWithErrBounds(coeffs, errBound, getPsExact);
}


/*
function getOtherTs(
        ps1: number[][], 
        ps2: number[][],
        ts2: RootInterval[]) {

    if (ts2.length === 0) { return []; }
    let ts1 = bezierBezierIntersectionImplicit(ps2, ps1);
    if (ts1.length === 0) { return []; }

    let is1 = ts1.map(t => [evaluate(ps1, t.r[0]), evaluate(ps1, t.r[1])]);
    let is2 = ts2.map(t => evaluate(ps2, (t.r[0] + t.r[1]) / 2));

    let del = 2**-20;

    let tPairs: RootInterval[][] = [];
    for (let i=0; i<ts1.length; i++) {
        let p1 = is1[i];
        // TODO - temp box size - fix
        let box1 = [[p1[0]-del, p1[1]-del], [p1[0]+del, p1[1]+del]]
        let found = false;
        for (let j=0; j<ts2.length; j++) {
            let p2 = is2[j];
            let box2 = [[p2[0]-del, p2[1]-del], [p2[0]+del, p2[1]+del]]
            if (areBoxesIntersecting(true)(box1, box2)) {
                if (found) { 
                    console.log('bomb'); 
                    continue; 
                }
                found = true;
                tPairs.push([ts1[i], ts2[j]]);
            }
        }
    }

    return tPairs;
}
*/

/*
function addDebugInfo(ps1: number[][], ps2: number[][], ts: number[][]) {
    if (typeof _bez_debug_ === 'undefined') { return; }

    _bez_debug_.generated.elems.beziers.push([ps1, ps2]);

    for (let t of ts) {
        _bez_debug_.generated.elems.intersection.push(
            evaluate(ps2, t[1])
        );
        _bez_debug_.generated.elems.intersection.push(
            evaluate(ps1, t[0])
        );
    }
}
*/

export { 
    bezierBezierIntersectionImplicit/*, 
    getOtherTs*/
}
