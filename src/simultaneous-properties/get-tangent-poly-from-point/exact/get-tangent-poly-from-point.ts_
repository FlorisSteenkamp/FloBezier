
import { 
    expansionDiff, expansionProduct, scaleExpansion, negativeOf, 
    calculateSum, calculate, twoProduct 
} from "flo-numerical";


const tp = twoProduct;
const epr = expansionProduct;
const sce = scaleExpansion;


/**
 * Returns the polynomial whose roots are all the t values on the given bezier 
 * curve such that the line from the given point to the point on the bezier 
 * evaluated at t is tangent to the bezier at t.
 * * **precondition** coefficients of curve and point bit-aligned bitlength <= 49
 * @param ps an order 1, 2 or 3 bezier curve given by its control points
 * @param p a point
 */
function getTangentPolyFromPointExact(ps: number[][], p: number[]) {
    if (ps.length === 4) {
        return getPolyForCubicExact(ps, p);
    } else if (ps.length === 3) {
        return getPolyForQuadraticExact(ps, p);
    } else if (ps.length === 2) {
        return getPolyForLineExact(ps, p);
    }
}


/**
 * * * **precondition** coefficients of curve and point bit-aligned bitlength <= 49
 * @param ps 
 * @param p 
 */
function getPolyForCubicExact(ps: number[][], p: number[]) {
    let [[x0, y0], [x1, y1], [x2, y2], [x3, y3]] = ps;
    let [x, y] = p;

    let xx0 = x0 - x;  // (bitlength <= 52) => exact
    let xx1 = x1 - x;  // (bitlength <= 52) => exact
    let xx2 = x2 - x;  // (bitlength <= 52) => exact
    let xx3 = x3 - x;  // (bitlength <= 52) => exact
    let yy0 = y0 - y;  // (bitlength <= 52) => exact
    let yy1 = y1 - y;  // (bitlength <= 52) => exact
    let yy2 = y2 - y;  // (bitlength <= 52) => exact
    let yy3 = y3 - y;  // (bitlength <= 52) => exact

    let x00 = tp(xx0,xx0);
    let x01 = scaleExpansion(tp(xx0,xx1), 6);
    let x02 = scaleExpansion(tp(xx0,xx2), 6);
    let x03 = scaleExpansion(tp(xx0,xx3), 2);
    let x11 = scaleExpansion(tp(xx1,xx1), 9);
    let x12 = scaleExpansion(tp(xx1,xx2), 18);
    let x13 = scaleExpansion(tp(xx1,xx3), 6);
    let x22 = scaleExpansion(tp(xx2,xx2), 9);
    let x23 = scaleExpansion(tp(xx2,xx3), 6);
    let x33 = tp(xx3,xx3);

    let x01_ = negativeOf(x01); 
    let x03_ = negativeOf(x03); 
    let x12_ = negativeOf(x12); 
    let x23_ = negativeOf(x23); 

    let y00 = tp(yy0,yy0);
    let y01 = scaleExpansion(tp(yy0,yy1), 6);
    let y02 = scaleExpansion(tp(yy0,yy2), 6);
    let y03 = scaleExpansion(tp(yy0,yy3), 2);
    let y11 = scaleExpansion(tp(yy1,yy1), 9);
    let y12 = scaleExpansion(tp(yy1,yy2), 18);
    let y13 = scaleExpansion(tp(yy1,yy3), 6);
    let y22 = scaleExpansion(tp(yy2,yy2), 9);
    let y23 = scaleExpansion(tp(yy2,yy3), 6);
    let y33 = tp(yy3,yy3);

    let y01_ = negativeOf(y01);
    let y03_ = negativeOf(y03);
    let y12_ = negativeOf(y12);
    let y23_ = negativeOf(y23);

    //let t5 = 6 * ((x33 - x23 + x13 - x03 + x22 - x12 + x02 + x11 - x01 + x00) + 
    //              (y33 - y23 + y13 - y03 + y22 - y12 + y02 + y11 - y01 + y00));
    let t5 = scaleExpansion(calculateSum(
            [x33, x23_, x13, x03_, x22, x12_, x02, x11, x01_, x00, 
             y33, y23_, y13, y03_, y22, y12_, y02, y11, y01_, y00]
    ), 6);

    //let t4 = 5 * (x23 - 2*x13 + 3*x03 - 2*x22 + 3*x12 - 4*x02 - 4*x11 + 5*x01 - 6*x00 +
    //              y23 - 2*y13 + 3*y03 - 2*y22 + 3*y12 - 4*y02 - 4*y11 + 5*y01 - 6*y00);
    let t4 = scaleExpansion(calculate([
        [x23],  [[-2],x13], [[3],x03], [[-2],x22], [[3],x12], [[-4],x02], [[-4],x11], [[5],x01], [[-6],x00],
        [y23],  [[-2],y13], [[3],y03], [[-2],y22], [[3],y12], [[-4],y02], [[-4],y11], [[5],y01], [[-6],y00]
    ]), 5);

    //let t3 = 4 * (x13 - 3*x03 + x22 - 3*x12 + 6*x02 + 6*x11 - 10*x01 + 15*x00 +
    //              y13 - 3*y03 + y22 - 3*y12 + 6*y02 + 6*y11 - 10*y01 + 15*y00);	
    let t3 = scaleExpansion(calculate([
        [x13], [[-3],x03], [x22], [[-3],x12], [[6],x02], [[6],x11], [[-10],x01], [[15],x00],
        [y13], [[-3],y03], [y22], [[-3],y12], [[6],y02], [[6],y11], [[-10],y01], [[15],y00]
    ]), 4);

    //let t2 = 3 * (x03 + x12 - 4*x02 - 4*x11 + 10*x01 - 20*x00 +
    //              y03 + y12 - 4*y02 - 4*y11 + 10*y01 - 20*y00);
    let t2 = scaleExpansion(calculate([
        [x03], [x12], [[-4],x02], [[-4],x11], [[10],x01], [[-20],x00],
        [y03], [y12], [[-4],y02], [[-4],y11], [[10],y01], [[-20],y00]
    ]), 3);

    //let t1 = 2 * (x02 + x11 - 5*x01 + 15*x00 +
    //              y02 + y11 - 5*y01 + 15*y00);
    let t1 = scaleExpansion(calculate([
        [x02], [x11], [[-5],x01], [[15],x00],
        [y02], [y11], [[-5],y01], [[15],y00]
    ]), 2);

    //let t0 = (x01 - 6*x00 +
    //          y01 - 6*y00);
    let t0 = calculate([
        [x01], [[-6],x00],
        [y01], [[-6],y00]
    ]);

    return [t5,t4,t3,t2,t1,t0];
}


/**
 * * * **precondition** coefficients of curve and point bit-aligned bitlength <= 49
 * @param ps 
 * @param p 
 */
function getPolyForQuadraticExact(
        ps: number[][], 
        p: number[]) {

    let [[x0, y0], [x1, y1], [x2, y2]] = ps;
    let [x, y] = p;

    let xx0 = x0 - x;  // (bitlength <= 52) => exact
    let xx1 = x1 - x;  // (bitlength <= 52) => exact
    let xx2 = x2 - x;  // (bitlength <= 52) => exact
    let yy0 = y0 - y;  // (bitlength <= 52) => exact
    let yy1 = y1 - y;  // (bitlength <= 52) => exact
    let yy2 = y2 - y;  // (bitlength <= 52) => exact

    let x00 = tp(xx0,xx0);
    let x01 = tp(xx0,xx1);
    let x02 = tp(xx0,xx2);
    let x11 = tp(xx1,xx1);
    let x12 = tp(xx1,xx2);
    let x22 = tp(xx2,xx2);

    let y00 = tp(yy0,yy0);
    let y01 = tp(yy0,yy1);
    let y02 = tp(yy0,yy2);
    let y11 = tp(yy1,yy1);
    let y12 = tp(yy1,yy2);
    let y22 = tp(yy2,yy2);

    let t3 = calculate([
        [y22], [[2],y02], [[-4],y12], [[4],y11], [[-4],y01], [y00],
        [x22], [[2],x02], [[-4],x12], [[4],x11], [[-4],x01], [x00]
    ]);
    
    let t2 = scaleExpansion(calculate([
        [y12], [[-1],y02], [[-2],y11], [[3],y01], [[-1],y00],
        [x12], [[-1],x02], [[-2],x11], [[3],x01], [[-1],x00]
    ]), 3);
     
    let t1 = calculate([
        [y02], [[2],y11], [[-6],y01], [[3],y00],
        [x02], [[2],x11], [[-6],x01], [[3],x00]
    ]);
     
    let t0 = calculate([
        [y01], [[-1],y00],
        [x01], [[-1],x00]
    ]);

    return [t3,t2,t1,t0];
}


/**
 * * * **precondition** coefficients of curve and point bit-aligned bitlength <= 49
 * @param ps 
 * @param p 
 */
function getPolyForLineExact(ps: number[][], p: number[]) {
    let [[x0, y0], [x1, y1]] = ps;
    let [xp, yp] = p;

    let xx0 = x0 - xp;  // (bitlength <= 52) => exact
    let xx1 = x1 - xp;  // (bitlength <= 52) => exact
    let yy0 = y0 - yp;  // (bitlength <= 52) => exact
    let yy1 = y1 - yp;  // (bitlength <= 52) => exact

    let x00 = tp(xx0,xx0);
    let x01 = tp(xx0,xx1);
    let x11 = tp(xx1,xx1);

    let y00 = tp(yy0,yy0);
    let y01 = tp(yy0,yy1);
    let y11 = tp(yy1,yy1);

    let t1 = calculate([
        [y11], [[-2],y01], [y00],
        [x11], [[-2],x01], [x00]
    ]);
        
    let t0 = calculate([
        [y01], [[-1],y00], 
        [x01], [[-1],x00]
    ]) 

    return [t1,t0];
}


export { getTangentPolyFromPointExact }
