
declare var _bez_debug_: BezDebug; 

import { getX } from "../to-power-basis/get-x";
import { getY } from "../to-power-basis/get-y";
import { detSlowExact } from "../matrix/det-naive";
import { BezDebug } from "../debug/debug";

// TODO - this is slow - make faster, e.g. manually expand determinants using
// Python's SymPy.
// Also, implicitization of curves have now been unrolled so don't use this
// anymore.

/**
 * Returns true if the given point is on the given bezier curve where the 
 * parameter t is allowed to extend to +-infinity, i.e. t is an element of 
 * [-inf, +inf], false otherwise.
 * 
 * * Precondition: ps and p must be grid-aligned and have a maximum bitlength 
 * of 49.
 */
function isPointOnBezierExtension(ps: number[][], p: number[]): boolean {
    // Get power basis
    const x = getX(ps);
    const y = getY(ps);

    // Move to origin
    x[x.length-1] -= p[0];
    y[y.length-1] -= p[1];

    const a = 0;
    const b = 0;
    const c = 0;
    const d = 0;
    const e = 0;
    const f = 0;
    const g = 0;
    const h = 0;

    if (x.length === 4) {
        [a,b,c,d] = x;
    } else if (x.length === 3) {
        [b,c,d] = x;
    } else if (x.length === 2) {
        [c,d] = x;
    }

    if (y.length === 4) {
        [e,f,g,h] = y;
    } else if (y.length === 3) {
        [f,g,h] = y;
    } else if (y.length === 2) {
        [g,h] = y;
    }

    
    // first non-zero x power
    const fnzX = 
        a !== 0 ? 3 :
        b !== 0 ? 2 :
        c !== 0 ? 1 :
        d !== 0 ? 0 : -1;

    // first non-zero y power
    const fnzY = 
        e !== 0 ? 3 :
        f !== 0 ? 2 :
        g !== 0 ? 1 :
        h !== 0 ? 0 : -1;

    // Swap if necessary
    if (fnzX < fnzY) {
        [fnzX, fnzY] = [fnzY, fnzX];
        [a,e] = [e,a];
        [b,f] = [f,b];
        [c,g] = [g,c];
        [d,h] = [h,d];
    }

    // The sylvester matrix
    const S: number[][];
    if (fnzX === 3 && fnzY === 3) {
        S = [
            [a,b,c,d,0,0],
            [0,a,b,c,d,0],
            [0,0,a,b,c,d],
            [e,f,g,h,0,0],
            [0,e,f,g,h,0],
            [0,0,e,f,g,h]
        ];
    } else if (fnzX === 3 && fnzY === 2) {
        S = [
            [a,b,c,d,0],
            [0,a,b,c,d],
            [f,g,h,0,0],
            [0,f,g,h,0],
            [0,0,f,g,h]
        ];
    } else if (fnzX === 3 && fnzY === 1) {
        S = [
            [a,b,c,d],
            [g,h,0,0],
            [0,g,h,0],
            [0,0,g,h]
        ];
    } else if (fnzX === 3 && fnzY === 0) {
        // of course we can take a shortcut here - left for symmetry
        return false;
        /*
        S = [
            [h,0,0],
            [0,h,0],
            [0,0,h]
        ];
        */
    } else if (fnzX === 3 && fnzY === -1) {
        // This is a cubic curve that 'loops' back on itself - it degenerates into
        // a self-overlapping line. The point is on the curve.
        return true;
    } else if (fnzX === 2 && fnzY === 2) {
        S = [
            [b,c,d,0],
            [0,b,c,d],
            [f,g,h,0],
            [0,f,g,h]
        ];
    } else if (fnzX === 2 && fnzY === 1) {
        S = [
            [b,c,d],
            [g,h,0],
            [0,g,h]
        ];
    } else if (fnzX === 2 && fnzY === 0) {
        return false;
        // Below just kept for the sake of symmetry
        /*
        S = [
            [h,0],
            [0,h]
        ];
        */
    } else if (fnzX === 2 && fnzY === -1) {
        // This is a cubic curve that 'loops' back on itself - it degenrates into
        // a self-overlapping line. The point is on the curve.
        return true;
    } else if (fnzX === 1 && fnzY === 1) {
        // x(t) is a line, y(t) is also a line
        S = [
            [c,d],
            [g,h]
        ];
    } else if (fnzX === 1 && fnzY === 0) {
        // x(t) is a line, y(t) === d
        // This degenerates into the line y(x) === d
        return false;
        //S = [[h]];
    } else if (fnzX === 1 && fnzY === -1) {
        // x(t) is a line, y(t) === 0
        // This is a line y(x) === 0. The point is on the curve.
        return true;
    } else if (fnzX === 0 && fnzY === 0) {
        // x(t) is a constant !== 0, y(t) is a constant !== 0
        // This is a bezier degenerated into a point
        return false;
    } else if (fnzX === 0 && fnzY === -1) {
        // x(t) is a constant !== 0, y(t) === 0
        // This is also a bezier degenerated into a point
        return false;
    } else if (fnzX === -1 && fnzY === -1) {
        // x(t) === 0, y(t) === 0
        // This is also a bezier degenerated into a point, but the point is
        // identical to the input point!
        return true;
    }

    const detS = detSlowExact(
        S.map(row => row.map(x => [x]))
    );

    return detS[detS.length - 1] === 0;
}


export { isPointOnBezierExtension }
