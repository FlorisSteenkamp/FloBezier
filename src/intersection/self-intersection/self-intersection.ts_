
import { getCoeffs3 } from "./naive/get-coeffs-3";
import { getCoeffs3Quad } from './quad/get-coeffs-3';
import { getCoeffs3Exact } from "./exact/get-coeffs-3";
import { 
    sign, expansionDiff, expansionProduct, scaleExpansion2, qMultQuad, 
    qDiffQuad, qMultBy4, estimate, compare, qDivQuadWithError
} from "flo-numerical";
import { γγ3 } from "../../error-analysis/error-analysis";


const γγ3_ = 1/γγ3;
const abs = Math.abs;
const edif = expansionDiff;
const epr = expansionProduct;
const sce = scaleExpansion2;
const qmq = qMultQuad;
const qdq = qDiffQuad;


/**
 * Returns the self-intersection t values of the given cubic bezier curve if it 
 * exists and if both t-values are in [0,1], else return undefined.
 * * **precondition**: max bit-aligned bitlength: 47
 * * only cubic (or higher order) bezier curves have self-intersections
 * * see http://www.mare.ee/indrek/misc/2d.pdf
 * @param ps A cubic bezier curve.
 */
function bezierSelfIntersection(ps: number[][]): number[] {
    if (ps.length < 4) {
        // lines and quadratics don't have self-intersections (except of course
        // degenerate quadratics).
        return undefined;
    }

    // Apply fast pre-filter - we assume without good reason that about 1 in 10 
    // beziers will have a cusp.
    let { coeffs, errBound } = getCoeffs3Quad(ps);
    
    // check if there is a double root => cusp
    let precision = 1; // 0 === double, 1 === quad, 2 === exact
    let [a, b, c] = coeffs;
    let [a_, b_, c_] = errBound;

    let sgnA: number;
    // if error in a cannot discern a from zero then go exact
    if (a_ > abs(a[1])) {
        precision = 2;
        [a, b, c] = getCoeffs3Exact(ps);
        sgnA = sign(a);
    } else {
        sgnA = a[1];
    }

    if (sgnA === 0) {
        return undefined;  // no cusp or loop possible;
    }

    a_ *= γγ3_;  // => a_ /= γγ3
    b_ *= γγ3_;  // => b_ /= γγ3
    c_ *= γγ3_;  // => c_ /= γγ3

    // discriminant = b^2 - 4ac
    let D: number[];
    let sgn: number; 
    let D_: number;
    if (precision === 1) { 
        let _b = abs(b[1]);
        // quad - D = b^2 - 4ac
        let q1 = qmq(b,b);
        let q1_ = 2*b_*_b + 2*abs(q1[1]); // the error in b**2
        let q2 = qmq(a,c);
        let _a = abs(a[1]);
        let _c = abs(c[1]);
        let q2_ = a_*_c + _a*c_ + 2*abs(q2[1])
        let q3 = qMultBy4(q2);
        let q3_ = 4*q2_;
        D = qdq(q1,q3);
        D_ = γγ3*(q1_ + q3_ + abs(D[1]));

        // if error in D cannot discern D from zero then go exact
        if (D_ > abs(D[1])) {
            precision = 2;
            // exact - D = b^2 - 4ac
            D = edif(epr(b,b), sce(4,epr(a, c)));
            D_ = 0;
            sgn = sign(D);
        } else {
            sgn = D[1];
        }
    } else {
        // exact - D = b^2 - 4ac
        D = edif(epr(b,b), sce(4,epr(a, c)));
        D_ = 0;
        sgn = sign(D);
    }
    
    if (sgn < 0) {
        // sgn < 0 => no real roots => no cusp or double point for t in [0,1]
        return undefined;
    }

    //let _a_ = estimate(a);
    //let _b_ = estimate(b);

    /*
    if (sgn > 0) {
        // estimate roots to reasonable accuracy (a few ulps) in a numerical 
        // stable way

        aaa qDivQuadWithError
        let D_ = Math.sqrt(estimate(D));
        let c_ = estimate(c);
        let t1;
        let t2;
        if (_b_ >= 0) {
            t1 = (-_b_ - D_) / (2*_a_);
            t2 = (2*c_) / (-b - D_);
        } else {
            t1 = (2*c_) / (-_b_ + D_);
            t2 = (-_b_ + D_) / (2*_a_);
        }

        // TODO - calculate proper error bound
        let errorBound = 8 * Number.EPSILON;

        // if any root is outside the range => no double point for t in [0,1]
        if (t1 < -errorBound || t1 > 1 + errorBound ||
            t2 < -errorBound || t2 > 1 + errorBound) {

            return undefined;
        }

        t1 = t1 < 0 
            ? 0 
            : t1 > 1 ? 1 : t1;

        t2 = t2 < 0 
            ? 0 
            : t2 > 1 ? 1 : t2;

        return t1 < t2 ? [t1, t2] : [t2, t1];
    }
    

    // sign === 0 => cusp

    // set t = n/d = b/-2a, where n === b, d === -2a
    let d = sce(-2,a);
    let sgnN = sign(b);
    let sgnD = sign(d);

    // if result is negative the cusp is outside the bezier endpoints
    let sgn_ = sgnN * sgnD;
    if (sgn_ < 0) { return undefined; }

    // if result is > 1 the cusp is outside the bezier endpoints
    if (compare(abs(b), abs(d)) > 0) { return undefined; }

    let t = -_b_ / (2*_a_);
    return [t, t];
    */


    /*
    let poly = getCoeffs3(ps).map(p => p.slice(p.length-2, p.length));

    // the roots should certainly be accurate to within 5 ulps (nearly always
    // less than 1 ulp even in the case of several extremely close roots)

    let ts = quadAllRootsPrecise(poly, 0, 1);

    if (ts.length === 0 || ts.length === 1) { return undefined; }

    // There can only be one root since cubic beziers can only have one crunode.
    return ts;*/
}



export { bezierSelfIntersection }

