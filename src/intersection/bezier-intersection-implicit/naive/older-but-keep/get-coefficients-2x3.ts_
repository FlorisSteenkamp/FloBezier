
//import { getImplicitFormExact } from "../../implicit-form/get-implicit-form";
import { getX } from "../../../to-power-basis/get-x";
import { getY } from "../../../to-power-basis/get-y";
import { getImplicitForm2 } from "../../../implicit-form/naive/get-implicit-form2";


function getCoeffs2x3(ps1: number[][], ps2: number[][]) {
    let { vₓₓ, vₓᵧ, vᵧᵧ, vₓ, vᵧ, v } = 
        getImplicitForm2(ps1);

    let [c3, c2, c1, c0] = getX(ps2);
    let [d3, d2, d1, d0] = getY(ps2);


    let c0c0 = c0*c0;
    let c0c1 = c0*c1;
    let c0c2 = c0*c2;
    let c0c3 = c0*c3;
    let c0d0 = c0*d0;
    let c0d1 = c0*d1;
    let c0d2 = c0*d2;
    let c0d3 = c0*d3;
    let c1c1 = c1*c1;
    let c1c2 = c1*c2;
    let c1c3 = c1*c3;
    let c1d0 = c1*d0;
    let c1d1 = c1*d1;
    let c1d2 = c1*d2;
    let c1d3 = c1*d3;
    let c2c2 = c2*c2;
    let c2c3 = c2*c3;
    let c2d0 = c2*d0;
    let c2d1 = c2*d1;
    let c2d2 = c2*d2;
    let c2d3 = c2*d3;
    let c3c3 = c3*c3;
    let c3d0 = c3*d0;
    let c3d1 = c3*d1;
    let c3d2 = c3*d2;
    let c3d3 = c3*d3;
    let d0d0 = d0*d0;
    let d0d1 = d0*d1;    
    let d0d2 = d0*d2;
    let d0d3 = d0*d3;
    let d1d1 = d1*d1;
    let d1d2 = d1*d2;
    let d1d3 = d1*d3;
    let d2d2 = d2*d2;
    let d2d3 = d2*d3;
    let d3d3 = d2*d2;


    // a3**2*v_xx + a3*b3*v_xy + b3**2*v_yy
    //let v6 =
    //    c3c3*vₓₓ +
    //    c3d3*vₓᵧ +
    //    d3d3*vᵧᵧ;
    let v6 =
        c3c3*vₓₓ +
        c3d3*vₓᵧ +
        d3d3*vᵧᵧ;        


    // 2*a2*a3*v_xx + a2*b3*v_xy + a3*b2*v_xy + 2*b2*b3*v_yy
    //let v5 =
    //    2*(c2c3*vₓₓ + d2d3*vᵧᵧ) +
    //    vₓᵧ*(c2d3 + c3d2);
    let v5 =
        2*(c2c3*vₓₓ + d2d3*vᵧᵧ) +
        vₓᵧ*(c2d3 + c3d2);        


    // 2*a1*a3*v_xx + a1*b3*v_xy + a2**2*v_xx + a2*b2*v_xy + a3*b1*v_xy + 2*b1*b3*v_yy + b2**2*v_yy
    //let v4 =
    //    (2*c1c3 + c2c2)*vₓₓ +
    //    (2*d1d3 + d2d2)*vᵧᵧ +
    //    (c1d3 + c2d2 + c3d1);
    let v4 =
        (2*c1c3 + c2c2)*vₓₓ +
        (2*d1d3 + d2d2)*vᵧᵧ +
        (c1d3 + c2d2 + c3d1);        


    // 2*a0*a3*v_xx + a0*b3*v_xy + 2*a1*a2*v_xx + 
    // a1*b2*v_xy + a2*b1*v_xy + a3*b0*v_xy + 
    // a3*v_x + 2*b0*b3*v_yy + 2*b1*b2*v_yy + b3*v_y
    //let v3 =
    //    2*((c0c3 + c1c2)*vₓₓ + (d0d3 + d1d2)*vᵧᵧ) +
    //    (c0d3 + c1d2 + c2d1 + c3d0)*vₓᵧ +
    //    c3*vₓ +
    //    d3*vᵧ;
    let v3 =
        2*((c0c3 + c1c2)*vₓₓ + (d0d3 + d1d2)*vᵧᵧ) +
        (c0d3 + c1d2 + c2d1 + c3d0)*vₓᵧ +
        c3*vₓ +
        d3*vᵧ;

    
    // 2*a0*a2*v_xx + a0*b2*v_xy + a1**2*v_xx + 
    // a1*b1*v_xy + a2*b0*v_xy + a2*v_x + 
    // 2*b0*b2*v_yy + b1**2*v_yy + b2*v_y
    //let v2 =
    //    (2*c0c2 + c1c1)*vₓₓ +
    //    (2*d0d2 + d1d1)*vᵧᵧ +
    //    (c0d2 + c1d1 + c2d0)*vₓᵧ +
    //    c2*vₓ +
    //    d2*vᵧ;
    let v2 =
        (2*c0c2 + c1c1)*vₓₓ +
        (2*d0d2 + d1d1)*vᵧᵧ +
        (c0d2 + c1d1 + c2d0)*vₓᵧ +
        c2*vₓ +
        d2*vᵧ;


    // 2*a0*a1*v_xx + a0*b1*v_xy + a1*b0*v_xy + a1*v_x + 2*b0*b1*v_yy + b1*v_y
    //let v1 =
    //    2*(c0c1*vₓₓ + d0d1*vᵧᵧ) +
    //    (c0d1 + c1d0)*vₓᵧ +
    //    c1*vₓ +
    //    d1*vᵧ;
    let v1 =
        2*(c0c1*vₓₓ + d0d1*vᵧᵧ) +
          (c0d1 + c1d0)*vₓᵧ +
          c1*vₓ +
          d1*vᵧ;          
    

    // a0**2*v_xx + a0*b0*v_xy + a0*v_x + b0**2*v_yy + b0*v_y + v_0
    //let v0 =
    //    c0c0*vₓₓ +
    //    c0d0*vₓᵧ +
    //    d0d0*vᵧᵧ +
    //    c0*vₓ +
    //    d0*vᵧ +
    //    v;
    let v0 =
        c0c0*vₓₓ +
        c0d0*vₓᵧ +
        d0d0*vᵧᵧ +
        c0*vₓ +
        d0*vᵧ +
        v;
        

    return [v6, v5, v4, v3, v2, v1, v0];
}


export { getCoeffs2x3 }
