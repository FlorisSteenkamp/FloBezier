"use strict";
exports.__esModule = true;
exports.toHybridQuadratic = void 0;
/**
 * Returns the hybrid quadratic version of the given cubic bezier. For a
 * definition of hybrid quadratic bezier curves please see this paper:
 * http://scholarsarchive.byu.edu/cgi/viewcontent.cgi?article=2206&context=etd
 *
 * * returns an array of three quadratic bezier points where the
 * middle point is a 'hybrid' point represented as a line (itself represented
 * by two points (a linear bezier curve)) which can be evaluated at a different
 * t value (call it th). If evaluated at the same t value the result is the same
 * as evaluating the original cubic bezier at t. The set generated by evaluating
 * the hybrid quadratic curve for all (t,th) value pairs forms a geometric area
 * bound around the orginal cubic bezier curve. The length of the linear bezier
 * curve mentioned above is a measure of how closely the cubic can be
 * represented as a quadratic bezier curve.
 *
 * @param ps a cubic bezier curve.
 *
 * @doc mdx
 */
function toHybridQuadratic(ps) {
    if (ps.length === 4) {
        var _a = ps[0], x0 = _a[0], y0 = _a[1], _b = ps[1], x1 = _b[0], y1 = _b[1], _c = ps[2], x2 = _c[0], y2 = _c[1], _d = ps[3], x3 = _d[0], y3 = _d[1];
        return [
            [x0, y0],
            [
                [(3 * x1 - x0) / 2, (3 * y1 - y0) / 2],
                [(3 * x2 - x3) / 2, (3 * y2 - y3) / 2] // evaluated at t
            ],
            [x3, y3] // evaluated at t
        ];
    }
    throw new Error('The given bezier curve is invalid (it must be a cubic)');
}
exports.toHybridQuadratic = toHybridQuadratic;
