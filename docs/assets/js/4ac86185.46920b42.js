"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8026],{180:function(e,t,n){n.r(t),n.d(t,{assets:function(){return z},contentTitle:function(){return g},default:function(){return w},frontMatter:function(){return h},metadata:function(){return v},toc:function(){return C}});var r=n(7462),i=n(3366),a=n(7294),l=n(3905),s=n(2041),o=n(6085),u=n(9354),c=n(3546),m=n(4388),p=n(809),d=(0,m.t)(o.E,o.d),f=c.Vr,k=[[1,1],[5.125,8],[15.375,.875],[4.375,5.125]];function b(e){var t=(0,u.P)(e,"#0f0","transparent"),n=[k],r=f.apply(void 0,n);return t(k.map(d)),r.map((function(t){return n=d((0,c.ku)(k,t)),(0,p.x)(e,"transparent","#00f")(n,5);var n})),[{result:r,params:[n]}]}function N(){return a.createElement(a.Fragment,null,a.createElement(s.O,{functionName:"bezierSelfIntersection",draw:b,draggables:k}))}var _=["components"],h={id:"intersection_self_intersection_bezier_self_intersection",title:"bezier-self-intersection"},g=void 0,v={unversionedId:"modules/intersection_self_intersection_bezier_self_intersection",id:"modules/intersection_self_intersection_bezier_self_intersection",title:"bezier-self-intersection",description:"Defined in intersection/self-intersection/bezier-self-intersection.ts:53",source:"@site/docs/modules/intersection_self_intersection_bezier_self_intersection.mdx",sourceDirName:"modules",slug:"/modules/intersection_self_intersection_bezier_self_intersection",permalink:"/FloBezier/docs/modules/intersection_self_intersection_bezier_self_intersection",draft:!1,tags:[],version:"current",frontMatter:{id:"intersection_self_intersection_bezier_self_intersection",title:"bezier-self-intersection"},sidebar:"sidebar",previous:{title:"circle-bezier-intersection",permalink:"/FloBezier/docs/modules/intersection_circle_bezier_intersection_circle_bezier_intersection"},next:{title:"curvature",permalink:"/FloBezier/docs/modules/local_properties_at_t_curvature"}},z={},C=[{value:"Parameters:",id:"parameters",level:4}],y={toc:C};function w(e){var t=e.components,n=(0,i.Z)(e,_);return(0,l.kt)("wrapper",(0,r.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"function bezierSelfIntersection(ps: number[][], inRange?: boolean): number[]\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Defined in ",(0,l.kt)("a",{parentName:"em",href:"https://github.com/FlorisSteenkamp/FloBezier/blob/a2fe14d/src/intersection/self-intersection/bezier-self-intersection.ts#L53"},"intersection/self-intersection/bezier-self-intersection.ts:53"))),(0,l.kt)("p",null,"Returns the unique self-intersection parameter ",(0,l.kt)("inlineCode",{parentName:"p"},"t")," values of the given\nbezier curve if they exist, else return ",(0,l.kt)("inlineCode",{parentName:"p"},"[]")," (see also the ",(0,l.kt)("inlineCode",{parentName:"p"},"inRange"),"\nparameter below)."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"only cubic (or higher order) bezier curves can have unique self-intersections"),(0,l.kt)("li",{parentName:"ul"},"this algorithm is mathematically guaranteed accurate to within an absolute\nerror of ",(0,l.kt)("inlineCode",{parentName:"li"},"4 * Number.EPSILON")," for the returned ",(0,l.kt)("inlineCode",{parentName:"li"},"t")," values satisfying ",(0,l.kt)("inlineCode",{parentName:"li"},"|t| <= 1"),"\nor a relative error of the same ",(0,l.kt)("inlineCode",{parentName:"li"},"4 * Number.EPSILON")," otherwise."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"special case:")," a cusp is considered a degenerate self-intersection and\nthe (duplicate) ",(0,l.kt)("inlineCode",{parentName:"li"},"t")," values will be returned")),(0,l.kt)(N,{mdxType:"BezierSelfIntersection"}),(0,l.kt)("h4",{id:"parameters"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ps")),(0,l.kt)("td",{parentName:"tr",align:null},"number","[][]"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"a bezier curve given as an array of its control points")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"inRange")),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"if ",(0,l.kt)("inlineCode",{parentName:"td"},"inRange === true")," (the default) then return the two ",(0,l.kt)("inlineCode",{parentName:"td"},"t")," parameter values only if both are in ","[0,1]"," else return ",(0,l.kt)("inlineCode",{parentName:"td"},"[]"),". If ",(0,l.kt)("inlineCode",{parentName:"td"},"inRange === false")," then return the (0,1 or 2) ",(0,l.kt)("inlineCode",{parentName:"td"},"t")," values in ",(0,l.kt)("inlineCode",{parentName:"td"},"[0,1]")," even if only one is in that range.")))))}w.isMDXComponent=!0}}]);