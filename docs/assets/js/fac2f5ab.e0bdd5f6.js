"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7107],{7683:function(t,e,r){r.r(e),r.d(e,{assets:function(){return C},contentTitle:function(){return g},default:function(){return z},frontMatter:function(){return y},metadata:function(){return h},toc:function(){return w}});var n=r(7462),a=r(3366),i=r(7294),l=r(3905),u=r(2041),s=r(6085),o=r(9354),p=r(3546),m=r(4388),d=r(809),c=(0,m.t)(s.E,s.d),f=p.ZP,k=[[1,1],[5.125,8],[15.375,.875],[13.5,9]],b=[{title:"max curviness (radians)",val:.4,min:.001,max:2,step:.001}];function v(t){var e=(0,o.P)(t,"#0f0","transparent"),r=b[0].val,n=[k,r],a=f.apply(void 0,n);return e(k.map(c)),a.map((function(e){return r=c((0,p.ku)(k,e)),(0,d.x)(t,"transparent","#00f")(r,5);var r})),[{result:a,params:[n]}]}function _(){return i.createElement(i.Fragment,null,i.createElement(u.O,{functionName:"splitByCurvature",draw:v,draggables:k,scalars:b}))}var N=["components"],y={id:"transformation_split_split_by_curvature",title:"split-by-curvature"},g=void 0,h={unversionedId:"modules/transformation_split_split_by_curvature",id:"modules/transformation_split_split_by_curvature",title:"split-by-curvature",description:"Defined in transformation/split/split-by-curvature.ts:22",source:"@site/docs/modules/transformation_split_split_by_curvature.mdx",sourceDirName:"modules",slug:"/modules/transformation_split_split_by_curvature",permalink:"/FloBezier/docs/modules/transformation_split_split_by_curvature",draft:!1,tags:[],version:"current",frontMatter:{id:"transformation_split_split_by_curvature",title:"split-by-curvature"},sidebar:"sidebar",previous:{title:"from-to-incl-error-bound",permalink:"/FloBezier/docs/modules/transformation_split_from_to_incl_error_bound"},next:{title:"split-by-curvature-and-length",permalink:"/FloBezier/docs/modules/transformation_split_split_by_curvature_and_length"}},C={},w=[{value:"Parameters:",id:"parameters",level:4}],x={toc:w};function z(t){var e=t.components,r=(0,a.Z)(t,N);return(0,l.kt)("wrapper",(0,n.Z)({},x,r,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"function splitByCurvature(ps: number[][], maxCurviness?: number, minTSpan?: number): number[]\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Defined in ",(0,l.kt)("a",{parentName:"em",href:"https://github.com/FlorisSteenkamp/FloBezier/blob/a2fe14d/src/transformation/split/split-by-curvature.ts#L22"},"transformation/split/split-by-curvature.ts:22"))),(0,l.kt)("p",null,"Split the order 0,1,2 or 3 bezier curve into pieces (given as an array of\nparameter ",(0,l.kt)("inlineCode",{parentName:"p"},"t")," values) such that each piece is flat within a given tolerance\ngiven by the ",(0,l.kt)("inlineCode",{parentName:"p"},"curviness")," function."),(0,l.kt)(_,{mdxType:"SplitByCurvature"}),(0,l.kt)("h4",{id:"parameters"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default value"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ps")),(0,l.kt)("td",{parentName:"tr",align:null},"number","[][]"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"an order 0,1,2 or 3 bezier curve given as an ordered array of its control point coordinates, e.g. ",(0,l.kt)("inlineCode",{parentName:"td"},"[[0,0], [1,1], [2,1], [2,0]]"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"maxCurviness")),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null},"0.4"),(0,l.kt)("td",{parentName:"tr",align:null},"optional; defaults to ",(0,l.kt)("inlineCode",{parentName:"td"},"0.4 radians"),"; maximum curviness (must be > 0) as calculated using the ",(0,l.kt)("inlineCode",{parentName:"td"},"curviness")," function (which measures the total angle in radians formed by the vectors formed by the ordered control points);")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"minTSpan")),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null},"2**-16"),(0,l.kt)("td",{parentName:"tr",align:null},"optional; defaults to ",(0,l.kt)("inlineCode",{parentName:"td"},"2**-16"),"; the minimum ",(0,l.kt)("inlineCode",{parentName:"td"},"t")," span that can be returned for a bezier piece; necessary for cubics otherwise a curve with a cusp would cause an infinite loop")))))}z.isMDXComponent=!0}}]);