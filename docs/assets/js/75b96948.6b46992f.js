"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5694],{3886:function(e,t,r){r.r(t),r.d(t,{assets:function(){return _},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return b}});var o=r(7462),n=r(3366),i=(r(7294),r(3905)),a=r(3546),s=(r(2041),r(6085));(0,r(4388).t)(s.E,s.d),a.bn;var d=["components"],l={id:"to_power_basis_to_power_basis_1st_derivative_to_power_basis_1st_derivative_error_counters",title:"to-power-basis-1st-derivative-error-counters"},p=void 0,u={unversionedId:"modules/to_power_basis_to_power_basis_1st_derivative_to_power_basis_1st_derivative_error_counters",id:"modules/to_power_basis_to_power_basis_1st_derivative_to_power_basis_1st_derivative_error_counters",title:"to-power-basis-1st-derivative-error-counters",description:"Defined in to-power-basis/to-power-basis-1st-derivative/to-power-basis-1st-derivative-error-counters.ts:77",source:"@site/docs/modules/to_power_basis_to_power_basis_1st_derivative_to_power_basis_1st_derivative_error_counters.mdx",sourceDirName:"modules",slug:"/modules/to_power_basis_to_power_basis_1st_derivative_to_power_basis_1st_derivative_error_counters",permalink:"/FloBezier/docs/modules/to_power_basis_to_power_basis_1st_derivative_to_power_basis_1st_derivative_error_counters",draft:!1,tags:[],version:"current",frontMatter:{id:"to_power_basis_to_power_basis_1st_derivative_to_power_basis_1st_derivative_error_counters",title:"to-power-basis-1st-derivative-error-counters"},sidebar:"sidebar",previous:{title:"hausdorff-distance-one-sided",permalink:"/FloBezier/docs/modules/simultaneous_properties_hausdorff_distance_hausdorff_distance_one_sided"},next:{title:"to-power-basis-1st-derivative-dd",permalink:"/FloBezier/docs/modules/to_power_basis_to_power_basis_1st_derivative_double_double_to_power_basis_1st_derivative_dd"}},_={},b=[{value:"Parameters:",id:"parameters",level:4}],c={toc:b};function m(e){var t=e.components,r=(0,n.Z)(e,d);return(0,i.kt)("wrapper",(0,o.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"function toPowerBasis_1stDerivativeErrorCounters(ps: number[][]): number[][]\n")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Defined in ",(0,i.kt)("a",{parentName:"em",href:"https://github.com/FlorisSteenkamp/FloBezier/blob/a2fe14d/src/to-power-basis/to-power-basis-1st-derivative/to-power-basis-1st-derivative-error-counters.ts#L77"},"to-power-basis/to-power-basis-1st-derivative/to-power-basis-1st-derivative-error-counters.ts:77"))),(0,i.kt)("p",null,"Returns a representation of the error (from which an absolute error bound\ncan be calculated) when calculating the derivative of the power basis\nrepresentation of a bezier curve of order <= 3 (using\ne.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"toPowerBasis_1stDerivative")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"toPowerBasis_1stDerivativeDd"),").\nThe returned error representation needs to be multiplied with\n",(0,i.kt)("a",{parentName:"p",href:"https://www.amazon.ca/Introduction-Matrix-Computations-G-Stewart/dp/0126703507"},"Stewart error counters\xb9"),"\nand an appropriate error function, ",(0,i.kt)("inlineCode",{parentName:"p"},"\u03b3"),", depending on the precision used (e.g. double\nor double-double). This is explained in more detail below. See\nalso ",(0,i.kt)("a",{parentName:"p",href:"http://ftp.demec.ufpr.br/CFD/bibliografia/Higham_2002_Accuracy%20and%20Stability%20of%20Numerical%20Algorithms.pdf"},"Higham 2002"),"\np. 68 near the bottom."),(0,i.kt)("p",null,"(1) G. W. Stewart. Introduction to Matrix Computations. Academic Press, New York,\n1973. xiii+441 pp. ISBN 0-12-670350-7"),(0,i.kt)("p",null,"The absolute erros below can be calculated as follows (where ",(0,i.kt)("inlineCode",{parentName:"p"},"<E>")," are the\nerror counters as indicated in the comments of the return value below):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"double precision: ",(0,i.kt)("inlineCode",{parentName:"li"},"<E> * (\u03b3(1)) * result_")),(0,i.kt)("li",{parentName:"ul"},"double-double precision: ",(0,i.kt)("inlineCode",{parentName:"li"},"<E> * (\u03b3\u03b3(3)) * result_"))),(0,i.kt)("p",null,"where [","[\u03b3]","] and [","[\u03b3\u03b3]","] are the usual error functions with ",(0,i.kt)("inlineCode",{parentName:"p"},"\u03b3(1) === 1.1102230246251568e-16"),"\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"\u03b3\u03b3(3) === 3.697785493223493e-32"),"."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"D")," in the error counter formula is zero for double precision and 1 for\ndouble-double precision."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"// for cubic bezier curves\nreturn [\n    [\n        X2,  // <E> === D+3 (D = 0 for double, 1 for double-double precision)\n        X1,  // <E> === D+2\n        X0   // <E> === D+3\n    ],\n    [\n        Y2,  // <E> === D+3\n        Y1,  // <E> === D+2\n        Y0   // <E> === D+3\n    ]\n]\n\n// for quadratic bezier curves\nreturn [\n    [\n        X1,  // <E> === D+1 (D = 0 for double, 1 for double-double precision)\n        X0   // <E> === D\n    ],\n    [\n        Y1,  // <E> === D+1\n        Y0   // <E> === D\n    ]\n];\n\n// for linear bezier curves (i.e. lines)\nreturn [\n    [\n        X0_  // <E> === D (D = 0 for double, 1 for double-double precision)\n    ],\n    [\n        Y0_  // <E> === D\n    ]\n];\n")),(0,i.kt)("p",null,"<ToPowerBasis_1stDerivativeErrorCounters />"),(0,i.kt)("h4",{id:"parameters"},"Parameters:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"ps")),(0,i.kt)("td",{parentName:"tr",align:null},"number","[][]"),(0,i.kt)("td",{parentName:"tr",align:null},"an order 0,1,2 or 3 bezier curve given by an ordered array of its control points, e.g. ",(0,i.kt)("inlineCode",{parentName:"td"},"[[0,0],[1,1],[2,1],[2,0]]"))))))}m.isMDXComponent=!0}}]);