"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5989],{6066:function(t,e,r){r.r(e),r.d(e,{assets:function(){return v},contentTitle:function(){return g},default:function(){return E},frontMatter:function(){return _},metadata:function(){return h},toc:function(){return y}});var n=r(7462),a=r(3366),o=r(7294),l=r(3905),i=r(2041),m=r(6085),p=r(9354),d=r(3546),u=(0,r(4388).t)(m.E,m.d),s=d.RU,c=[[1,1],[7.125,10],[17.375,2.875],[5.375,3.125]],k=[{title:"tS",val:.25,min:-1,max:2,step:.01},{title:"tE",val:.75,min:-1,max:2,step:.01}];function b(t){var e=k[0].val,r=k[1].val,n=[c,e,r],a=(0,p.P)(t,"#0f0","transparent"),o=(0,p.P)(t,"#f00","transparent"),l=s.apply(void 0,n);return a(c.map(u)),o(l.ps.map(u)),[{result:l,params:[n]}]}function N(){return o.createElement(o.Fragment,null,o.createElement(i.O,{functionName:"fromToInclErrorBound",draw:b,draggables:c,scalars:k}))}var f=["components"],_={id:"transformation_split_from_to_incl_error_bound",title:"from-to-incl-error-bound"},g=void 0,h={unversionedId:"modules/transformation_split_from_to_incl_error_bound",id:"modules/transformation_split_from_to_incl_error_bound",title:"from-to-incl-error-bound",description:"Defined in transformation/split/from-to-incl-error-bound.ts:24",source:"@site/docs/modules/transformation_split_from_to_incl_error_bound.mdx",sourceDirName:"modules",slug:"/modules/transformation_split_from_to_incl_error_bound",permalink:"/FloBezier/docs/modules/transformation_split_from_to_incl_error_bound",draft:!1,tags:[],version:"current",frontMatter:{id:"transformation_split_from_to_incl_error_bound",title:"from-to-incl-error-bound"},sidebar:"sidebar",previous:{title:"from-to",permalink:"/FloBezier/docs/modules/transformation_split_from_to"},next:{title:"split-by-curvature",permalink:"/FloBezier/docs/modules/transformation_split_split_by_curvature"}},v={},y=[{value:"Parameters:",id:"parameters",level:4}],C={toc:y};function E(t){var e=t.components,r=(0,a.Z)(t,f);return(0,l.kt)("wrapper",(0,n.Z)({},C,r,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"function fromToInclErrorBound(ps: number[][], tS: number, tE: number): object\n")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Defined in ",(0,l.kt)("a",{parentName:"em",href:"https://github.com/FlorisSteenkamp/FloBezier/blob/a2fe14d/src/transformation/split/from-to-incl-error-bound.ts#L24"},"transformation/split/from-to-incl-error-bound.ts:24"))),(0,l.kt)("p",null,"Returns a bezier curve, ",(0,l.kt)("inlineCode",{parentName:"p"},"ps"),", that starts and ends at the given ",(0,l.kt)("inlineCode",{parentName:"p"},"t")," parameters\n(starting at ",(0,l.kt)("inlineCode",{parentName:"p"},"tS")," and ending at ",(0,l.kt)("inlineCode",{parentName:"p"},"tE"),") including a matching coordinate-wise\nerror bound, ",(0,l.kt)("inlineCode",{parentName:"p"},"_ps"),", that needs to be multiplied by ",(0,l.kt)("inlineCode",{parentName:"p"},"3u"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"5u")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"8u")," (for\nlines, quadratic or cubic bezier curves respectively) before use,\nwhere ",(0,l.kt)("inlineCode",{parentName:"p"},"u === Number.EPSILON/2"),"."),(0,l.kt)(N,{mdxType:"FromToInclErrorBound"}),(0,l.kt)("h4",{id:"parameters"},"Parameters:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ps")),(0,l.kt)("td",{parentName:"tr",align:null},"number","[][]"),(0,l.kt)("td",{parentName:"tr",align:null},"an order 0,1,2 or 3 bezier curve given as an ordered array of its control point coordinates, e.g. ",(0,l.kt)("inlineCode",{parentName:"td"},"[[0,0], [1,1], [2,1], [2,0]]"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"tS")),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null},"the ",(0,l.kt)("inlineCode",{parentName:"td"},"t")," parameter where the resultant bezier should start")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"tE")),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null},"the ",(0,l.kt)("inlineCode",{parentName:"td"},"t")," parameter where the resultant bezier should end")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Returns:")," object"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ps")),(0,l.kt)("td",{parentName:"tr",align:null},"number","[][]")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"_ps")),(0,l.kt)("td",{parentName:"tr",align:null},"number","[][]")))))}E.isMDXComponent=!0}}]);