{"version":3,"names":[],"mappings":"","sources":["src/debug/draw-elem/draw-elem.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst flo_vector2d_1 = require(\"flo-vector2d\");\nfunction fatLine(g, fatLine) {\n    let draw = _bez_debug_.fs.draw;\n    let { l, minD, maxD } = fatLine;\n    let [lp1, lp2] = l;\n    const E = 1024;\n    let lv = flo_vector2d_1.fromTo(lp1, lp2);\n    let lvTimes10 = [+E * lv[0], +E * lv[1]];\n    let reverseLvTimes10 = [-E * lv[0], -E * lv[1]];\n    let normal = [-lv[1], lv[0]]; // Rotate by -90 degrees\n    let normMin = flo_vector2d_1.toLength(normal, minD);\n    let normMax = flo_vector2d_1.toLength(normal, maxD);\n    let extLp1 = flo_vector2d_1.translate(lp1, reverseLvTimes10);\n    let extLp2 = flo_vector2d_1.translate(lp2, lvTimes10);\n    let nl11 = flo_vector2d_1.translate(extLp1, normMin);\n    let nl12 = flo_vector2d_1.translate(extLp2, normMin);\n    let nl21 = flo_vector2d_1.translate(extLp1, normMax);\n    let nl22 = flo_vector2d_1.translate(extLp2, normMax);\n    let nl1 = [nl11, nl12];\n    let nl2 = [nl21, nl22];\n    let $line1 = draw.line(g, nl1);\n    let $line2 = draw.line(g, nl2);\n    return [...$line1, ...$line2];\n}\nfunction beziers(g, beziers) {\n    let draw = _bez_debug_.fs.draw;\n    let $bezier1 = draw.bezier(g, beziers[0], 'blue thin5 nofill');\n    let $bezier2 = draw.bezier(g, beziers[1], 'green thin5 nofill');\n    let size = getSize([...beziers[0], ...beziers[1]]) / 400;\n    let $dots = [\n        ...draw.dot(g, beziers[0][0], size, 'blue'),\n        ...draw.dot(g, beziers[0][1], size, 'blue'),\n        ...draw.dot(g, beziers[0][2], size, 'blue'),\n        ...draw.dot(g, beziers[0][3], size, 'blue'),\n        ...draw.dot(g, beziers[1][0], size, 'green'),\n        ...draw.dot(g, beziers[1][1], size, 'green'),\n        ...draw.dot(g, beziers[1][2], size, 'green'),\n        ...draw.dot(g, beziers[1][3], size, 'green'),\n    ];\n    return [...$bezier1, ...$bezier2, ...$dots];\n}\nfunction getSize(ps) {\n    let minX = Number.POSITIVE_INFINITY;\n    let minY = Number.POSITIVE_INFINITY;\n    let maxX = Number.NEGATIVE_INFINITY;\n    let maxY = Number.NEGATIVE_INFINITY;\n    for (let p of ps) {\n        if (p[0] < minX) {\n            minX = p[0];\n        }\n        if (p[1] < minY) {\n            minY = p[1];\n        }\n        if (p[0] > maxX) {\n            maxX = p[0];\n        }\n        if (p[1] > maxY) {\n            maxY = p[1];\n        }\n    }\n    let width = maxX - minX;\n    let height = maxY - minY;\n    return Math.max(width, height);\n}\nfunction intersection(g, p) {\n    let $elems = _bez_debug_.fs.draw.crossHair(g, p, 'red thin5 nofill', 0.05);\n    return $elems;\n}\nfunction extreme(g, extreme) {\n    let $elems = _bez_debug_.fs.draw.crossHair(g, extreme.p, 'red thin10 nofill', 0.05);\n    return $elems;\n}\nfunction boundingHull(g, hull) {\n    let $polygon = _bez_debug_.fs.draw.polygon(g, hull, 'thin5 black nofill');\n    return $polygon;\n}\nfunction looseBoundingBox(g, box) {\n    let $box = _bez_debug_.fs.draw.rect(g, box, 'thin5 brown nofill');\n    return $box;\n}\nfunction tightBoundingBox(g, box) {\n    let $box = _bez_debug_.fs.draw.polygon(g, box, 'thin5 black nofill');\n    return $box;\n}\nlet drawElemFunctions = {\n    beziers,\n    intersection,\n    extreme,\n    boundingHull,\n    looseBoundingBox,\n    tightBoundingBox,\n    fatLine\n};\nexports.drawElemFunctions = drawElemFunctions;\n"],"file":"draw-elem.js"}