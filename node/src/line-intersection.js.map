{"version":3,"names":[],"mappings":"","sources":["src/line-intersection.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst flo_poly_1 = require(\"flo-poly\");\nconst flo_vector2d_1 = require(\"flo-vector2d\");\nconst get_y_1 = require(\"./get-y\");\n/**\n * Returns the bezier t values of the intersection between the given cubic\n * bezier and the given line.\n * @param ps - The bezier curve\n * @param l - The line given as a start and end point\n */\nfunction lineIntersection(ps, l) {\n    let [[x0, y0], [x1, y1]] = l;\n    let [x, y] = [x1 - x0, y1 - y0];\n    if (x === 0 && y === 0) {\n        return [];\n    } // It is not a line, it's a point. \n    // Move the line and the bezier together so the line's first point is on the\n    // origin.\n    ps = flo_vector2d_1.translatePs([-x0, -y0], ps);\n    // Rotate the bezier and line together so the line is y=0.\n    let len = Math.sqrt(x * x + y * y);\n    let sinθ = y / len;\n    let cosθ = x / len;\n    ps = flo_vector2d_1.rotatePs(-sinθ, cosθ, ps);\n    // Find the intersection t values\n    return flo_poly_1.default.allRoots(get_y_1.getY(ps), 0, 1);\n}\nexports.lineIntersection = lineIntersection;\n"],"file":"line-intersection.js"}