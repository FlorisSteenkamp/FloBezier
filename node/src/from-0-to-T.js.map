{"version":3,"names":[],"mappings":"","sources":["src/from-0-to-T.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst de_casteljau_1 = require(\"./de-casteljau\");\n/**\n * Returns a cubic bezier curve that starts at the given curve's t=0 and ends\n * at the given t parameter. Uses de Casteljau's algorithm.\n *\n * A loose bound on the accuracy of the resultant points is given by:\n * |δP| = 2n*max_k(|b_k|)η, where n = 3 (cubic), b_k are the control points\n * abd η is Number.EPSILON.\n * @param ps - A cubic bezier curve\n * @param t - The t parameter where the resultant bezier should end\n */\n/*\nfunction from0ToT(ps: number[][], t: number): number[][] {\n    let [[x0, y0], [x1, y1], [x2, y2], [x3, y3]] = ps;\n    \r\n    let s  = 1  - t;\n    let t2 = t  * t;\n    let t3 = t2 * t;\n    let s2 = s  * s;\n    let s3 = s2 * s;\n\r\n    return [\n        [x0, y0],\n        [t*x1  + s*x0, t*y1 + s*y0],\n        [t2*x2 + 2*s*t*x1 + s2*x0, t2*y2 + 2*s*t*y1 + s2*y0],\n        [t3*x3 + 3*s*t2*x2 + 3*s2*t*x1 + s3*x0,\n         t3*y3 + 3*s*t2*y2 + 3*s2*t*y1 + s3*y0]\n    ];\n}\n*/\nfunction from0ToT(ps, t) {\n    let [[x0, y0], [x1, y1], [x2, y2], [x3, y3]] = ps;\n    let xs = [x0, x1, x2, x3];\n    let ys = [y0, y1, y2, y3];\n    let [x0_, x1_, x2_, x3_] = de_casteljau_1.deCasteljau(xs, t)[0];\n    let [y0_, y1_, y2_, y3_] = de_casteljau_1.deCasteljau(ys, t)[0];\n    return [[x0_, y0_], [x1_, y1_], [x2_, y2_], [x3_, y3_]];\n}\nexports.from0ToT = from0ToT;\n"],"file":"from-0-to-T.js"}