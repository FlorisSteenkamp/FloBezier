{"version":3,"names":[],"mappings":"","sources":["src/from-to.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst evaluate_1 = require(\"./evaluate\");\nconst from_0_to_T_1 = require(\"./from-0-to-T\");\nconst from_T_to_1_1 = require(\"./from-T-to-1\");\n/**\n * Returns a cubic bezier curve that starts at the given curve and ends at the\n * given t parameter. Uses de Casteljau's algorithm.\n *\n * A loose bound on the accuracy of the resultant points is given by:\n * |δP| = 2*2n*max_k(|b_k|)η, where n = 3 (cubic), b_k are the control points\n * abd η is Number.EPSILON.\n * @param ps - A cubic bezier curve\n * @param t1 - The t parameter where the resultant bezier should start\n * @param t2 - The t parameter where the resultant bezier should end\n */\nfunction fromTo(ps) {\n    return function (t1, t2) {\n        if (t1 === t2) {\n            // Degenerate case\n            let p = evaluate_1.evaluate(ps, t1);\n            return [p, p, p, p];\n        }\n        else if (t1 === 0 && t2 === 1) {\n            return ps;\n        }\n        else if (t1 === 0) {\n            return from_0_to_T_1.from0ToT(ps, t2);\n        }\n        else if (t2 === 1) {\n            return from_T_to_1_1.fromTTo1(ps, t1);\n        }\n        let t = from_T_to_1_1.fromTTo1(ps, t1);\n        return from_0_to_T_1.from0ToT(t, (t2 - t1) / (1 - t1));\n    };\n}\nexports.fromTo = fromTo;\n"],"file":"from-to.js"}