{"version":3,"names":[],"mappings":"","sources":["src/to-hybrid-quadratic.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Returns the hybrid quadratic version of the given cubic bezier. For a\n * definition of hybrid quadratic bezier curves see <a href=\"http://scholarsarchive.byu.edu/cgi/viewcontent.cgi?article=2206&context=etd\">\n * this paper</a>.\n * @param ps - A cubic bezier curve.\n * @returns An array of three quadratic bezier points where the\n * middle point is a 'hybrid' point represented as a line (itself represented\n * by two points (a linear bezier curve)) which can be evaluated at a different\n * t value (call it th). If evaluated at the same t value the result is the same\n * as evaluating the original cubic bezier at t. The set generated by evaluating\n * the hybrid quadratic curve for all (t,th) value pairs forms a geometric area\n * bound around the orginal cubic bezier curve. The length of the linear bezier\n * curve mentioned above is a measure of how closely the cubic can be\n * represented as a quadratic bezier curve.\n */\nfunction toHybridQuadratic(ps) {\n    let [[x0, y0], [x1, y1], [x2, y2], [x3, y3]] = ps;\n    return [\n        [x0, y0],\n        [[(3 * x1 - x0) / 2, (3 * y1 - y0) / 2],\n            [(3 * x2 - x3) / 2, (3 * y2 - y3) / 2]],\n        [x3, y3] // evaluated at t\n    ];\n}\nexports.toHybridQuadratic = toHybridQuadratic;\n"],"file":"to-hybrid-quadratic.js"}