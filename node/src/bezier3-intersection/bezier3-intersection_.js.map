{"version":3,"names":[],"mappings":"","sources":["src/bezier3-intersection/bezier3-intersection_.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst coincident_1 = require(\"../coincident\");\nconst from_to_1 = require(\"../from-to\");\nconst get_distance_to_line_function_1 = require(\"./get-distance-to-line-function\");\nconst calc_other_t_1 = require(\"./calc-other-t\");\nconst geo_clip_1 = require(\"./geo-clip\");\nconst center_1 = require(\"./center\");\n/**\n * Extremely accurate and extremely fast (cubically convergent in general with\n * fast iteration steps) algorithm that returns the intersections between two\n * cubic beziers.\n *\n * At stretches where the two curves run extremely close to (or on top of) each\n * other and curve the same direction an interval is returned instead of a\n * point. This tolerance can be set by the Δ parameter.\n *\n * The algorithm is based on a <a href=\"http://scholarsarchive.byu.edu/cgi/viewcontent.cgi?article=2206&context=etd\">paper</a>\n * that finds the intersection of a fat line and a so-called geometric interval\n * making it faster and more accurate than the standard fat-line intersection\n * algorithm. The algorithm has been modified to prevent run-away recursion\n * by checking for coincident pieces at subdivision steps.\n *\n * @param ps1 - A cubic bezier, e.g. [[0,0],[1,1],[2,1],[2,0]]\n * @param ps2 - Another cubic bezier\n * @param δ - An optional tolerance to within which the t parameter\n * should be calculated - defaults to the minimum value of 24*Number.EPSILON or\n * approximately 5e-15. Note that it might not make sense to set this to as\n * large as say 1e-5 since only a single iteration later the maximum accuracy\n * will be attained and not much speed will be gained anyway. Similarly if δ is\n * set to 1e-2 only two iterations will be saved. This is due to the algorithm\n * being cubically convergent (usually converging in about 4 to 8 iterations for\n * typical intersections).\n * @param Δ - A tolerance that indicates how closely a stretch of the\n * beziers can run together before being considered coincident. Defaults to the\n * minimum possible value of 1e-6 if not specified.\n * @returns An array that contains the t-value pairs at intersection\n * of the first and second beziers respectively. The array can also contain t\n * range pairs for coincident pieces that can be either used or ignored\n * depending on the application, e.g. the return value might be [[0.1,0.2],\n * [0.3,0.5],[[0.4,0.5],[0.6,0.7]]] that indicates intersection points at t\n * values of t1=0.1 and t2=0.2 for the first and second bezier respectively as\n * well as at t1=0.3 and t2=0.5 and finally indicates the curves to be nearly\n * coincident from t1=0.4 to t1=0.5 for the first bezier and t2=0.6 to t=0.7 for\n * the second bezier.\n */\nfunction bezier3Intersection(ps1, ps2, δ, Δ) {\n    // The minimum value Δ can be. If it is too small the algorithm may take too\n    // long in cases where the two curves run extremely close to each other for\n    // their entire length and curve the same direction.\n    const ΔMin = 1e-6;\n    // This is an estimate of the relative floating point error during clipping.\n    // A bound is given by |δP| = 2n*max_k(|b_k|)η, where n = 3 (cubic), b_k\n    // are the control points indexed by k=0,1,2,3 and η is machine epsilon, \n    // i.e. Number.EPSILON. We quadruple the bound to be sure.\n    const δMin = 24 * Number.EPSILON;\n    // Maximum error - limited to take rounding error into account.\n    if (δ === undefined) {\n        δ = 0;\n    }\n    δ = Math.max(δ, δMin);\n    if (Δ === undefined) {\n        Δ = ΔMin;\n    }\n    Δ = Math.max(Δ, ΔMin);\n    // Intersection t values for both beziers\n    let tss = [];\n    f(ps1, ps2, [0, 1], [0, 1], 1);\n    return tss;\n    // Helper function\n    function f(Q_, P_, qRange, pRange, idx) {\n        let cidx = idx === 0 ? 1 : 0; // Counter flip-flop index\n        // Move intersection toward the origin to prevent floating point issues\n        // that are introduced specifically by the getLineEquation function. \n        // This allows us to get a relative error in the final result usually in \n        // the 10 ULPS or less range.\n        [P_, Q_] = center_1.center(P_, Q_);\n        let [Q0, , , Q3] = Q_;\n        // Get the implict line equation for the line defined by the first and \n        // last control point of Q. This equation gives the distance between any \n        // point and the line.\n        let dQ = get_distance_to_line_function_1.getDistanceToLineFunction([Q0, Q3]);\n        // Calculate the distance from the control points of Q to the line \n        let dQi = (i) => dQ(Q_[i]);\n        let dQs = [1, 2].map(dQi);\n        let [dQ1, dQ2] = dQs;\n        // Calculate the fat line of Q.\n        let C = (dQ1 * dQ2 > 0) ? 3 / 4 : 4 / 9;\n        let dMin = C * Math.min(0, dQ1, dQ2);\n        let dMax = C * Math.max(0, dQ1, dQ2);\n        let { tMin, tMax } = geo_clip_1.geoClip(P_, dQ, dMin, dMax);\n        if (tMin === Number.POSITIVE_INFINITY) {\n            return; // No intersection\n        }\n        // The paper calls for a heuristic that if less than 30% will be\n        // clipped, rather split the longest curve and find intersections in the\n        // two halfs seperately.\n        if (tMax - tMin > 0.7) {\n            // Some length measure\n            let pSpan = pRange[1] - pRange[0];\n            let qSpan = qRange[1] - qRange[0];\n            let pq = coincident_1.coincident(P_, Q_);\n            if (pq !== undefined) {\n                return;\n            }\n            // Split the curve in half\n            if (pSpan <= qSpan) {\n                cidx = idx;\n                [P_, Q_] = [Q_, P_];\n                [pRange, qRange] = [qRange, pRange];\n            }\n            // Update t range.\n            let span = pRange[1] - pRange[0];\n            // 1st half\n            let tMinA = pRange[0];\n            let tMaxA = tMinA + span / 2;\n            // 2nd half\n            let tMinB = tMaxA;\n            let tMaxB = pRange[1];\n            let A = from_to_1.fromTo(P_)(0, 0.5);\n            let B = from_to_1.fromTo(P_)(0.5, 1);\n            f(A, Q_, [tMinA, tMaxA], qRange, cidx);\n            f(B, Q_, [tMinB, tMaxB], qRange, cidx);\n            return;\n        }\n        // Update t range.\n        let span = pRange[1] - pRange[0];\n        let tMin_ = (tMin * span + pRange[0]);\n        let tMax_ = (tMax * span + pRange[0]);\n        // Clip\n        P_ = from_to_1.fromTo(P_)(tMin, tMax);\n        if (Math.abs(tMax_ - tMin_) < δ) {\n            let t1 = (tMax_ + tMin_) / 2;\n            let pq = idx === 0 ? [ps1, ps2] : [ps2, ps1];\n            let t2 = calc_other_t_1.calcOtherT(t1, pq[0], pq[1]);\n            if (t2 === undefined) {\n                return undefined;\n            }\n            let ts = idx === 0 ? [t1, t2] : [t2, t1];\n            tss.push(ts);\n            return;\n        }\n        // Swap Q and P and iterate.\n        f(P_, Q_, [tMin_, tMax_], qRange, cidx);\n    }\n}\nexports.bezier3Intersection = bezier3Intersection;\n"],"file":"bezier3-intersection_.js"}