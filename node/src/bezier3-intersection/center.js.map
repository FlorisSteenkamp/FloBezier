{"version":3,"names":[],"mappings":"","sources":["src/bezier3-intersection/center.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst flo_vector2d_1 = require(\"flo-vector2d\");\n/**\n * Return the given two beziers but translated such that the shorter (by\n * some length measure) is closer to the origin.\n * @private\n * @param P\n * @param Q\n */\nfunction center(P, Q) {\n    let [P0, P1, P2, P3] = P;\n    let [Q0, Q1, Q2, Q3] = Q;\n    let lengthP = flo_vector2d_1.squaredDistanceBetween(P0, P1) + flo_vector2d_1.squaredDistanceBetween(P1, P2) + flo_vector2d_1.squaredDistanceBetween(P2, P3);\n    let lengthQ = flo_vector2d_1.squaredDistanceBetween(Q0, Q1) + flo_vector2d_1.squaredDistanceBetween(Q1, Q2) + flo_vector2d_1.squaredDistanceBetween(Q2, Q3);\n    let moveX;\n    let moveY;\n    if (lengthQ < lengthP) {\n        moveX = (Q0[0] + Q1[0] + Q2[0] + Q3[0]) / 4;\n        moveY = (Q0[1] + Q1[1] + Q2[1] + Q3[1]) / 4;\n    }\n    else {\n        moveX = (P0[0] + P1[0] + P2[0] + P3[0]) / 4;\n        moveY = (P0[1] + P1[1] + P2[1] + P3[1]) / 4;\n    }\n    P = P.map(x => [x[0] - moveX, x[1] - moveY]);\n    Q = Q.map(x => [x[0] - moveX, x[1] - moveY]);\n    return [P, Q];\n}\nexports.center = center;\n"],"file":"center.js"}