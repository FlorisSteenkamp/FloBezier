import { toCasStr } from './basic/to-cas-str';
import { bAbsCoeff } from './basic/bigint/b-abs-coeff';
import { bAdd } from './basic/bigint/b-add';
import { bDegree } from './basic/bigint/b-degree';
import { bDivideByConst } from './basic/bigint/b-divide-by-const';
import { bEqual } from './basic/bigint/b-equal';
import { bInvert } from './basic/bigint/b-invert';
import { bIsRationalMultipleOf } from './basic/bigint/b-is-rational-multiple-of';
import { bMultiply } from './basic/bigint/b-multiply';
import { bMultiplyByConst } from './basic/bigint/b-multiply-by-const';
import { bNegate } from './basic/bigint/b-negate';
import { bRemoveLeadingZeros } from './basic/bigint/b-remove-leading-zeros';
import { bSubtract } from './basic/bigint/b-subtract';
import { absCoeff } from './basic/double/abs-coeff';
import { add } from './basic/double/add';
import { degree } from './basic/double/degree';
import { divideByConst } from './basic/double/divide-by-const';
import { equal } from './basic/double/equal';
import { invert } from './basic/double/invert';
import { isRationalMultipleOf } from './basic/double/is-rational-multiple-of';
import { multiply } from './basic/double/multiply';
import { multiplyByConst } from './basic/double/multiply-by-const';
import { negate } from './basic/double/negate';
import { removeLeadingZeros } from './basic/double/remove-leading-zeros';
import { subtract } from './basic/double/subtract';
import { eAbsCoeff } from './basic/expansion/e-abs-coeff';
import { eAdd } from './basic/expansion/e-add';
import { eDegree } from './basic/expansion/e-degree';
import { eEqual } from './basic/expansion/e-equal';
import { eInvert } from './basic/expansion/e-invert';
import { eIsConstOrZero } from './basic/expansion/e-is-const-or-zero';
import { eIsRationalMultipleOf } from './basic/expansion/e-is-rational-multiple-of';
import { eIsUnit } from './basic/expansion/e-is-unit';
import { eMultiply } from './basic/expansion/e-multiply';
import { eMultiplyByConst } from './basic/expansion/e-multiply-by-const';
import { eNegate } from './basic/expansion/e-negate';
import { eProduct } from "./basic/expansion/e-product";
import { eRemoveLeadingZeros } from './basic/expansion/e-remove-leading-zeros';
import { eSubtract } from './basic/expansion/e-subtract';
import { bDifferentiate } from './calculus/bigint/b-differentiate';
import { differentiate } from './calculus/double/differentiate';
import { ddDifferentiate } from './calculus/double-double/dd-differentiate';
import { ddDifferentiateWithError } from './calculus/double-double/dd-differentiate-with-err';
import { eDifferentiate } from './calculus/expansion/e-differentiate';
import { bChangeVariablesLinear } from './change-variables/bigint/b-change-variables-linear';
import { bChangeVariablesScale } from './change-variables/bigint/b-change-variables-scale';
import { bChangeVariablesTranslateX } from './change-variables/bigint/b-change-variables-translate-x';
import { bReflectAboutYAxis } from './change-variables/bigint/b-reflect-about-y-axis';
import { changeVariablesLinear } from './change-variables/double/change-variables-linear';
import { changeVariablesScale } from './change-variables/double/change-variables-scale';
import { changeVariablesTranslateX } from './change-variables/double/change-variables-translate-x';
import { reflectAboutYAxis } from './change-variables/double/reflect-about-y-axis';
import { eChangeVariablesLinear } from './change-variables/expansion/e-change-variables-linear';
import { eChangeVariablesScale } from './change-variables/expansion/e-change-variables-scale';
import { eChangeVariablesTranslateX } from './change-variables/expansion/e-change-variables-translate-x';
import { eReflectAboutYAxis } from './change-variables/expansion/e-reflect-about-y-axis';
import { conditionNumber } from './error-analysis/condition-number';
import { γ } from './error-analysis/gamma';
import { γγ } from './error-analysis/gamma';
import { bPdivTrivial } from './euclidean-division-related/bigint/b-pdiv-trivial';
import { bPremSequencePrimitive } from './euclidean-division-related/bigint/b-prem-sequence-primitive';
import { bPremSequenceSubresultant } from './euclidean-division-related/bigint/b-prem-sequence-subresultant';
import { bPremSequenceTrivial } from './euclidean-division-related/bigint/b-prem-sequence-trivial';
import { bSturmChain } from './euclidean-division-related/bigint/b-sturm-chain';
import { premSequenceSubresultant } from './euclidean-division-related/double/prem-sequence-subresultant';
import { sturmChain } from './euclidean-division-related/double/sturm-chain';
import { ePdivTrivial } from './euclidean-division-related/expansion/e-pdiv-trivial';
import { ePremSequencePrimitive } from './euclidean-division-related/expansion/e-prem-sequence-primitive';
import { ePremSequenceSubresultant } from './euclidean-division-related/expansion/e-prem-sequence-subresultant';
import { eSturmChain } from './euclidean-division-related/expansion/e-sturm-chain';
import { bHorner } from './evaluate/bigint/b-horner';
import { bEvaluateAt0 } from './evaluate/bigint/b-evaluate-at-0';
import { bEvaluateAt1 } from './evaluate/bigint/b-evaluate-at-1';
import { AbsHorner } from './evaluate/double/abs-horner';
import { compHorner } from './evaluate/double/comp-horner';
import { compHornerIsFaithful } from './evaluate/double/comp-horner-is-faithful';
import { CompHornerK } from './evaluate/double/comp-horner-k';
import { compHornerWithRunningError } from './evaluate/double/comp-horner-with-running-error';
import { EFTHorner } from './evaluate/double/eft-horner';
import { evalCertified } from './evaluate/double/eval-certified';
import { evalCertifiedInclError } from './evaluate/double/eval-certified-incl-error';
import { evalK } from './evaluate/double/eval-k';
import { evaluateAt0 } from './evaluate/double/evaluate-at-0';
import { evaluateAt1 } from './evaluate/double/evaluate-at-1';
import { Horner } from './evaluate/double/horner';
import { hornerWithRunningError } from './evaluate/double/horner-with-running-error';
import { eeHorner } from './evaluate/expansion/e-e-horner';
import { eEvaluateAt0 } from './evaluate/expansion/e-evaluate-at-0';
import { eEvaluateAt1 } from './evaluate/expansion/e-evaluate-at-1';
import { eHorner } from './evaluate/expansion/e-horner';
import { bContent } from './factor/bigint/b-content';
import { bPrimitivePart } from './factor/bigint/b-primitive-part';
import { content } from './factor/double/content';
import { primitivePart } from './factor/double/primitive-part';
import { eContent } from './factor/expansion/e-content';
import { ePrimitivePart } from './factor/expansion/e-primitive-part';
import { bGcdPrs } from './gcd/bigint/b-gcd-prs';
import { bGcdInt } from './gcd/bigint/b-integer-gcd';
import { bGcdInts } from './gcd/bigint/b-integer-gcd';
import { gcdInt } from './gcd/double/integer-gcd';
import { gcdInts } from './gcd/double/integer-gcd';
import { eGcdInt } from './gcd/expansion/e-integer-gcd';
import { eGcdInts } from './gcd/expansion/e-integer-gcd';
import { bP1Norm } from './norm/bigint/b-p-1-norm';
import { bP2NormSquared } from './norm/bigint/b-p-2-norm-squared';
import { bPInfNorm } from './norm/bigint/b-p-inf-norm';
import { p1Norm } from './norm/double/p-1-norm';
import { p2Norm } from './norm/double/p-2-norm';
import { pInfNorm } from './norm/double/p-inf-norm';
import { eP1Norm } from './norm/expansion/e-p-1-norm';
import { eP2Norm } from './norm/expansion/e-p-2-norm';
import { ePInfNorm } from './norm/expansion/e-p-inf-norm';
import { flatRoots } from './predictive-random/double/random';
import { flatRootsArr } from './predictive-random/double/random';
import { flatCoefficients } from './predictive-random/double/random';
import { flatCoefficientsArr } from './predictive-random/double/random';
import { predictiveRandom } from './predictive-random/double/random';
import { bFlatRoots } from './predictive-random/bigint/b-random';
import { bFlatRootsArr } from './predictive-random/bigint/b-random';
import { bFlatCoefficients } from './predictive-random/bigint/b-random';
import { bFlatCoefficientsArr } from './predictive-random/bigint/b-random';
import { allRootsCertified } from './roots/certified/all-roots-certified';
import { allRootsCertifiedSimplified } from './roots/certified/all-roots-certified-simplified';
import { refineK1 } from './roots/certified/refine-k1';
import { RootInterval } from './roots/certified/root-interval';
import { mid } from './roots/certified/root-interval';
import { createRootExact } from './roots/certified/root-interval';
import { RootIntervalExp } from './roots/certified/root-interval-exp';
import { rootIntervalToExp } from './roots/certified/root-interval-to-exp';
import { bNumRoots } from './roots/descartes/bigint/b-num-roots';
import { bNumRootsIn01 } from './roots/descartes/bigint/b-num-roots-0-1';
import { bNumRootsInRange } from './roots/descartes/bigint/b-num-roots-in-range';
import { bSignChanges } from './roots/descartes/bigint/b-sign-changes';
import { numRoots } from './roots/descartes/double/num-roots';
import { numRootsIn01 } from './roots/descartes/double/num-roots-in-0-1';
import { numRootsInRange } from './roots/descartes/double/num-roots-in-range';
import { signChanges } from './roots/descartes/double/sign-changes';
import { eNumRoots } from './roots/descartes/expansion/e-num-roots';
import { eNumRootsIn01 } from './roots/descartes/expansion/e-num-roots-0-1';
import { eNumRootsInRange } from './roots/descartes/expansion/e-num-roots-in-range';
import { eSignChanges } from './roots/descartes/expansion/e-sign-changes';
import { bFromRoots } from './roots/from-roots/bigint/b-from-roots';
import { fromRoots } from './roots/from-roots/double/from-roots';
import { eFromRoots } from './roots/from-roots/expansion/e-from-roots';
import { allRoots } from './roots/naive/all-roots';
import { bisection } from './roots/naive/bisection';
import { brent } from './roots/naive/brent';
import { brentPoly } from './roots/naive/brent-poly';
import { ddDeflate } from './roots/naive/dd-deflate';
import { deflate } from './roots/naive/deflate';
import { quadraticRoots } from './roots/naive/quadratic-roots';
import { positiveRootUpperBound_LMQ } from './roots/root-bounds/root-bounds-lmq';
import { positiveRootLowerBound_LMQ } from './roots/root-bounds/root-bounds-lmq';
import { negativeRootLowerBound_LMQ } from './roots/root-bounds/root-bounds-lmq';
import { negativeRootUpperBound_LMQ } from './roots/root-bounds/root-bounds-lmq';
import { rootMagnitudeUpperBound_fujiwara } from './roots/root-bounds/root-magnitude-upper-bound-fujiwara';
import { rootMagnitudeUpperBound_rouche } from './roots/root-bounds/root-magnitude-upper-bound-rouche';
import { scaleFloatToInt } from './scale-to-int/scale-float-to-int';
import { scaleFloatsToInts } from './scale-to-int/scale-floats-to-ints';
import { scaleFloatssToIntss } from './scale-to-int/scale-floatss-to-intss';
import { scaleFloatToBigint } from './scale-to-int/scale-float-to-bigint';
import { scaleFloatsToBigints } from './scale-to-int/scale-floats-to-bigints';
import { scaleFloatssToBigintss } from './scale-to-int/scale-floatss-to-bigintss';
declare const operators: {
    toCasStr: typeof toCasStr;
    bAbsCoeff: typeof bAbsCoeff;
    bAdd: typeof bAdd;
    bDegree: typeof bDegree;
    bDivideByConst: typeof bDivideByConst;
    bEqual: typeof bEqual;
    bInvert: typeof bInvert;
    bIsRationalMultipleOf: typeof bIsRationalMultipleOf;
    bMultiply: typeof bMultiply;
    bMultiplyByConst: typeof bMultiplyByConst;
    bNegate: typeof bNegate;
    bRemoveLeadingZeros: typeof bRemoveLeadingZeros;
    bSubtract: typeof bSubtract;
    absCoeff: typeof absCoeff;
    add: typeof add;
    degree: typeof degree;
    divideByConst: typeof divideByConst;
    equal: typeof equal;
    invert: typeof invert;
    isRationalMultipleOf: typeof isRationalMultipleOf;
    multiply: typeof multiply;
    multiplyByConst: typeof multiplyByConst;
    negate: typeof negate;
    removeLeadingZeros: typeof removeLeadingZeros;
    subtract: typeof subtract;
    eAbsCoeff: typeof eAbsCoeff;
    eAdd: typeof eAdd;
    eDegree: typeof eDegree;
    eEqual: typeof eEqual;
    eInvert: typeof eInvert;
    eIsConstOrZero: typeof eIsConstOrZero;
    eIsRationalMultipleOf: typeof eIsRationalMultipleOf;
    eIsUnit: typeof eIsUnit;
    eMultiply: typeof eMultiply;
    eMultiplyByConst: typeof eMultiplyByConst;
    eNegate: typeof eNegate;
    eProduct: typeof eProduct;
    eRemoveLeadingZeros: typeof eRemoveLeadingZeros;
    eSubtract: typeof eSubtract;
    bDifferentiate: typeof bDifferentiate;
    differentiate: typeof differentiate;
    ddDifferentiate: typeof ddDifferentiate;
    ddDifferentiateWithError: typeof ddDifferentiateWithError;
    eDifferentiate: typeof eDifferentiate;
    bChangeVariablesLinear: typeof bChangeVariablesLinear;
    bChangeVariablesScale: typeof bChangeVariablesScale;
    bChangeVariablesTranslateX: typeof bChangeVariablesTranslateX;
    bReflectAboutYAxis: typeof bReflectAboutYAxis;
    changeVariablesLinear: typeof changeVariablesLinear;
    changeVariablesScale: typeof changeVariablesScale;
    changeVariablesTranslateX: typeof changeVariablesTranslateX;
    reflectAboutYAxis: typeof reflectAboutYAxis;
    eChangeVariablesLinear: typeof eChangeVariablesLinear;
    eChangeVariablesScale: typeof eChangeVariablesScale;
    eChangeVariablesTranslateX: typeof eChangeVariablesTranslateX;
    eReflectAboutYAxis: typeof eReflectAboutYAxis;
    conditionNumber: typeof conditionNumber;
    γ: typeof γ;
    γγ: typeof γγ;
    bPdivTrivial: typeof bPdivTrivial;
    bPremSequencePrimitive: typeof bPremSequencePrimitive;
    bPremSequenceSubresultant: typeof bPremSequenceSubresultant;
    bPremSequenceTrivial: typeof bPremSequenceTrivial;
    bSturmChain: typeof bSturmChain;
    premSequenceSubresultant: typeof premSequenceSubresultant;
    sturmChain: typeof sturmChain;
    ePdivTrivial: typeof ePdivTrivial;
    ePremSequencePrimitive: typeof ePremSequencePrimitive;
    ePremSequenceSubresultant: typeof ePremSequenceSubresultant;
    eSturmChain: typeof eSturmChain;
    bHorner: typeof bHorner;
    bEvaluateAt0: typeof bEvaluateAt0;
    bEvaluateAt1: typeof bEvaluateAt1;
    AbsHorner: typeof AbsHorner;
    compHorner: typeof compHorner;
    compHornerIsFaithful: typeof compHornerIsFaithful;
    CompHornerK: typeof CompHornerK;
    compHornerWithRunningError: typeof compHornerWithRunningError;
    EFTHorner: typeof EFTHorner;
    evalCertified: typeof evalCertified;
    evalCertifiedInclError: typeof evalCertifiedInclError;
    evalK: typeof evalK;
    evaluateAt0: typeof evaluateAt0;
    evaluateAt1: typeof evaluateAt1;
    Horner: typeof Horner;
    hornerWithRunningError: typeof hornerWithRunningError;
    eeHorner: typeof eeHorner;
    eEvaluateAt0: typeof eEvaluateAt0;
    eEvaluateAt1: typeof eEvaluateAt1;
    eHorner: typeof eHorner;
    bContent: typeof bContent;
    bPrimitivePart: typeof bPrimitivePart;
    content: typeof content;
    primitivePart: typeof primitivePart;
    eContent: typeof eContent;
    ePrimitivePart: typeof ePrimitivePart;
    bP1Norm: typeof bP1Norm;
    bP2NormSquared: typeof bP2NormSquared;
    bPInfNorm: typeof bPInfNorm;
    p1Norm: typeof p1Norm;
    p2Norm: typeof p2Norm;
    pInfNorm: typeof pInfNorm;
    eP1Norm: typeof eP1Norm;
    eP2Norm: typeof eP2Norm;
    ePInfNorm: typeof ePInfNorm;
    flatRoots: typeof flatRoots;
    flatRootsArr: (n: number, d: number, a?: number | undefined, b?: number | undefined, seed?: number | undefined, odds?: number | undefined) => number[][];
    flatCoefficients: typeof flatCoefficients;
    flatCoefficientsArr: (n: number, d: number, a?: number | undefined, b?: number | undefined, seed?: number | undefined, odds?: number | undefined) => number[][];
    predictiveRandom: typeof predictiveRandom;
    bFlatRoots: typeof bFlatRoots;
    bFlatRootsArr: typeof bFlatRootsArr;
    bFlatCoefficients: typeof bFlatCoefficients;
    bFlatCoefficientsArr: typeof bFlatCoefficientsArr;
    allRootsCertified: typeof allRootsCertified;
    allRootsCertifiedSimplified: typeof allRootsCertifiedSimplified;
    refineK1: typeof refineK1;
    mid: typeof mid;
    createRootExact: typeof createRootExact;
    rootIntervalToExp: typeof rootIntervalToExp;
    bNumRoots: typeof bNumRoots;
    bNumRootsIn01: typeof bNumRootsIn01;
    bNumRootsInRange: typeof bNumRootsInRange;
    bSignChanges: typeof bSignChanges;
    numRoots: typeof numRoots;
    numRootsIn01: typeof numRootsIn01;
    numRootsInRange: typeof numRootsInRange;
    signChanges: typeof signChanges;
    eNumRoots: typeof eNumRoots;
    eNumRootsIn01: typeof eNumRootsIn01;
    eNumRootsInRange: typeof eNumRootsInRange;
    eSignChanges: typeof eSignChanges;
    bFromRoots: typeof bFromRoots;
    fromRoots: typeof fromRoots;
    eFromRoots: typeof eFromRoots;
    allRoots: typeof allRoots;
    bisection: typeof bisection;
    brent: typeof brent;
    brentPoly: typeof brentPoly;
    ddDeflate: typeof ddDeflate;
    deflate: typeof deflate;
    quadraticRoots: typeof quadraticRoots;
    positiveRootUpperBound_LMQ: typeof positiveRootUpperBound_LMQ;
    positiveRootLowerBound_LMQ: (p: number[]) => number;
    negativeRootLowerBound_LMQ: (p: number[]) => number;
    negativeRootUpperBound_LMQ: (p: number[]) => number;
    rootMagnitudeUpperBound_fujiwara: typeof rootMagnitudeUpperBound_fujiwara;
    rootMagnitudeUpperBound_rouche: typeof rootMagnitudeUpperBound_rouche;
    scaleFloatToInt: typeof scaleFloatToInt;
    scaleFloatsToInts: typeof scaleFloatsToInts;
    scaleFloatssToIntss: typeof scaleFloatssToIntss;
    scaleFloatToBigint: typeof scaleFloatToBigint;
    scaleFloatsToBigints: typeof scaleFloatsToBigints;
    scaleFloatssToBigintss: typeof scaleFloatssToBigintss;
    bGcdPrs: typeof bGcdPrs;
    bGcdInt: typeof bGcdInt;
    bGcdInts: typeof bGcdInts;
    gcdInt: typeof gcdInt;
    gcdInts: typeof gcdInts;
    eGcdInt: typeof eGcdInt;
    eGcdInts: typeof eGcdInts;
};
export { operators };
export { toCasStr, bAbsCoeff, bAdd, bDegree, bDivideByConst, bEqual, bInvert, bIsRationalMultipleOf, bMultiply, bMultiplyByConst, bNegate, bRemoveLeadingZeros, bSubtract, absCoeff, add, degree, divideByConst, equal, invert, isRationalMultipleOf, multiply, multiplyByConst, negate, removeLeadingZeros, subtract, eAbsCoeff, eAdd, eDegree, eEqual, eInvert, eIsConstOrZero, eIsRationalMultipleOf, eIsUnit, eMultiply, eMultiplyByConst, eNegate, eProduct, eRemoveLeadingZeros, eSubtract, bDifferentiate, differentiate, ddDifferentiate, ddDifferentiateWithError, eDifferentiate, bChangeVariablesLinear, bChangeVariablesScale, bChangeVariablesTranslateX, bReflectAboutYAxis, changeVariablesLinear, changeVariablesScale, changeVariablesTranslateX, reflectAboutYAxis, eChangeVariablesLinear, eChangeVariablesScale, eChangeVariablesTranslateX, eReflectAboutYAxis, conditionNumber, γ, γγ, bPdivTrivial, bPremSequencePrimitive, bPremSequenceSubresultant, bPremSequenceTrivial, bSturmChain, premSequenceSubresultant, sturmChain, ePdivTrivial, ePremSequencePrimitive, ePremSequenceSubresultant, eSturmChain, bHorner, bEvaluateAt0, bEvaluateAt1, AbsHorner, compHorner, compHornerIsFaithful, CompHornerK, compHornerWithRunningError, EFTHorner, evalCertified, evalCertifiedInclError, evalK, evaluateAt0, evaluateAt1, Horner, hornerWithRunningError, eeHorner, eEvaluateAt0, eEvaluateAt1, eHorner, bContent, bPrimitivePart, content, primitivePart, eContent, ePrimitivePart, bP1Norm, bP2NormSquared, bPInfNorm, p1Norm, p2Norm, pInfNorm, eP1Norm, eP2Norm, ePInfNorm, flatRoots, flatRootsArr, flatCoefficients, flatCoefficientsArr, predictiveRandom, bFlatRoots, bFlatRootsArr, bFlatCoefficients, bFlatCoefficientsArr, allRootsCertified, allRootsCertifiedSimplified, refineK1, RootInterval, mid, createRootExact, RootIntervalExp, rootIntervalToExp, bNumRoots, bNumRootsIn01, bNumRootsInRange, bSignChanges, numRoots, numRootsIn01, numRootsInRange, signChanges, eNumRoots, eNumRootsIn01, eNumRootsInRange, eSignChanges, bFromRoots, fromRoots, eFromRoots, allRoots, bisection, brent, brentPoly, ddDeflate, deflate, quadraticRoots, positiveRootUpperBound_LMQ, positiveRootLowerBound_LMQ, negativeRootLowerBound_LMQ, negativeRootUpperBound_LMQ, rootMagnitudeUpperBound_fujiwara, rootMagnitudeUpperBound_rouche, scaleFloatToInt, scaleFloatsToInts, scaleFloatssToIntss, scaleFloatToBigint, scaleFloatsToBigints, scaleFloatssToBigintss, bGcdPrs, bGcdInt, bGcdInts, gcdInt, gcdInts, eGcdInt, eGcdInts };
